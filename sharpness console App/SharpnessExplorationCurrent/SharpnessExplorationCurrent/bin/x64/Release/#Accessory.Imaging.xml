<?xml version="1.0"?>
<doc>
    <assembly>
        <name>#Accessory.Imaging</name>
    </assembly>
    <members>
        <member name="T:SharpAccessory.Imaging.Classification.HierarchicalClassifier">
            <summary>Klassifiziert Objekte hierarchisch. Original Paper: Voss K. Ein rechentechnisches Verfahren 
            zur Konstruktion hierarchisch strukturierter Klassifikatoren. Elektronische Informationsverarbeitung 
            und Kybernetik. 1980:16, 281-286.</summary>
        </member>
        <member name="M:SharpAccessory.Imaging.Classification.HierarchicalClassifier.#ctor(SharpAccessory.Imaging.Classification.Rule[])">
            <summary>Erstellt und initialisiert eine neue Instanz.</summary>
            <param name="rules">Enthält die Klassifikationsregeln.</param>
        </member>
        <member name="M:SharpAccessory.Imaging.Classification.HierarchicalClassifier.Construct(SharpAccessory.Imaging.Classification.LearningSample[])">
            <summary>Erstellt einen neuen Klassifikator.</summary>
            <param name="samples">Enthält die Lernstichproben.</param>
        </member>
        <member name="M:SharpAccessory.Imaging.Classification.HierarchicalClassifier.Construct(SharpAccessory.Imaging.Classification.LearningSample[],System.Int32)">
            <summary>Erstellt einen neuen Klassifikator.</summary>
            <param name="samples">Enthält die Lernstichproben.</param>
            <param name="n">Gibt die Anzahl der möglichen Klassifikationsregeln an.</param>
        </member>
        <member name="M:SharpAccessory.Imaging.Classification.HierarchicalClassifier.Execute(SharpAccessory.Imaging.Segmentation.ObjectLayer)">
            <summary>Führt die Klassifikation aus.</summary>
            <param name="layer">Gibt die Objektebene an deren Objekte klassifiziert werden.</param>
        </member>
        <member name="M:SharpAccessory.Imaging.Classification.HierarchicalClassifier.Execute(SharpAccessory.Imaging.Classification.FeatureCollection)">
            <summary>Führt die Klassifikation aus.</summary>
            <param name="values">Enthält die Merkmale des Objekts.</param>
        </member>
        <member name="P:SharpAccessory.Imaging.Classification.HierarchicalClassifier.Rules">
            <summary>Ruft die Liste der Klassifikationsregeln ab.</summary>
        </member>
        <member name="T:SharpAccessory.Imaging.Classification.HierarchicalClassifier.RuleCollection">
            <summary>Verwaltet eine Liste von Klassifikationsregeln.</summary>
        </member>
        <member name="M:SharpAccessory.Imaging.Classification.HierarchicalClassifier.RuleCollection.#ctor(SharpAccessory.Imaging.Classification.Rule[])">
            <summary>Erstellt und initialisiert eine neue Instanz.</summary>
            <param name="rules">Gibt die Regeln an die in dieser Liste verwaltet werden.</param>
        </member>
        <member name="M:SharpAccessory.Imaging.Classification.HierarchicalClassifier.RuleCollection.Sort(System.Collections.Generic.IComparer{SharpAccessory.Imaging.Classification.Rule})">
            <summary>Diese Methode ist für diese Klasse nicht zulässig.</summary>
            <param name="comparer">Vergleicht zwei Elemente.</param>
        </member>
        <member name="M:SharpAccessory.Imaging.Classification.HierarchicalClassifier.RuleCollection.Sort(System.Int32,System.Int32,System.Collections.Generic.IComparer{SharpAccessory.Imaging.Classification.Rule})">
            <summary>Diese Methode ist für diese Klasse nicht zulässig.</summary>
            <param name="index">Der Index ab dem sortiert wird.</param>
            <param name="count">Die Anzahl der Elemente die sortiert werden.</param>
            <param name="comparer">Vergleicht zwei Elemente.</param>
        </member>
        <member name="M:SharpAccessory.Imaging.Classification.HierarchicalClassifier.RuleCollection.Sort(System.Comparison{SharpAccessory.Imaging.Classification.Rule})">
            <summary>Diese Methode ist für diese Klasse nicht zulässig.</summary>
            <param name="comparison">Methode die zwei Elemente vergleicht.</param>
        </member>
        <member name="T:SharpAccessory.Imaging.Classification.Operator">
            <summary>Listet Operatoren für Klassifikationsregeln auf.</summary>
        </member>
        <member name="F:SharpAccessory.Imaging.Classification.Operator.GreaterThan">
            <summary>Gibt an, dass ein Wert größer als der Schwellwert sein muß.</summary>
        </member>
        <member name="F:SharpAccessory.Imaging.Classification.Operator.LowerThan">
            <summary>Gibt an, dass ein Wert kleiner als der Schwellwert sein muß.</summary>
        </member>
        <member name="T:SharpAccessory.Imaging.Classification.Rule">
            <summary>Stellt eine Klassifikationsregel dar.</summary>
        </member>
        <member name="M:SharpAccessory.Imaging.Classification.Rule.#ctor(SharpAccessory.Imaging.Classification.Class,SharpAccessory.Imaging.Classification.Operator,System.String,System.Double,System.Double)">
            <summary>Erstellt und initialisiert eine neue Instanz.</summary>
            <param name="cls">Gibt die dazugehörige Klasse an.</param>
            <param name="op">Gibt den Operator an.</param>
            <param name="feature">Gibt den Namen des Features an.</param>
            <param name="threshold">Gibt den Schwellwert an.</param>
            <param name="certitude">Gibt die Gewissheit an.</param>
        </member>
        <member name="P:SharpAccessory.Imaging.Classification.Rule.Certitude">
            <summary>Ruft die Gewissheit ab.</summary>
        </member>
        <member name="P:SharpAccessory.Imaging.Classification.Rule.Class">
            <summary>Ruft die dazugehörige Klasse ab.</summary>
        </member>
        <member name="P:SharpAccessory.Imaging.Classification.Rule.Feature">
            <summary>Ruft den Namen des Features ab.</summary>
        </member>
        <member name="P:SharpAccessory.Imaging.Classification.Rule.Operator">
            <summary>Ruft den Operator ab.</summary>
        </member>
        <member name="P:SharpAccessory.Imaging.Classification.Rule.Threshold">
            <summary>Ruft den Schwellwert ab.</summary>
        </member>
        <member name="T:SharpAccessory.Imaging.Classification.RuleCollection">
            <summary>Verwaltet eine Liste von Klassifikationsregeln.</summary>
        </member>
        <member name="M:SharpAccessory.Imaging.Classification.RuleCollection.FindContainedClasses">
            <summary>Ruft die Liste aller enthaltenen Klassen ab.</summary>
        </member>
        <member name="M:SharpAccessory.Imaging.Classification.RuleCollection.FindContainedFeatures">
            <summary>Ruft die Namen aller enthaltenen Features ab.</summary>
        </member>
        <member name="T:SharpAccessory.Imaging.Classification.RuleFile">
            <summary>Liest und schreibt Klassifikationsregel-Dateien.</summary>
        </member>
        <member name="M:SharpAccessory.Imaging.Classification.RuleFile.#ctor">
            <summary>Erstellt und initialisiert eine neue Instanz.</summary>
        </member>
        <member name="M:SharpAccessory.Imaging.Classification.RuleFile.FromFile(System.String)">
            <summary>Öffnet und liest die angegebene Klassifikationsregel-Datei.</summary>
        </member>
        <member name="M:SharpAccessory.Imaging.Classification.RuleFile.FromBuffer(System.Byte[])">
            <summary>Liest eine Klassifikationsregel-Datei aus dem angegebenen Puffer.</summary>
        </member>
        <member name="M:SharpAccessory.Imaging.Classification.RuleFile.FromStream(System.IO.Stream)">
            <summary>Liest eine Klassifikationsregel-Datei aus dem angegebenen Stream.</summary>
        </member>
        <member name="M:SharpAccessory.Imaging.Classification.RuleFile.FromXmlDoc(System.Xml.XmlDocument)">
            <summary>Liest eine Klassifikationsregel-Datei aus dem angegebenen XML-Dokument.</summary>
        </member>
        <member name="M:SharpAccessory.Imaging.Classification.RuleFile.SaveToFile(System.String)">
            <summary>Speichert den aktuellen Inhalt in die angegebene Datei.</summary>
        </member>
        <member name="M:SharpAccessory.Imaging.Classification.RuleFile.SaveToBuffer">
            <summary>Speichert den aktuellen Inhalt in einen neuen Puffer.</summary>
        </member>
        <member name="P:SharpAccessory.Imaging.Classification.RuleFile.Rules">
            <summary>Ruft die Liste der in dieser Datei enthaltenen Klassifikationsregeln ab.</summary>
        </member>
        <member name="P:SharpAccessory.Imaging.Classification.RuleFile.IsWellKnownVersion">
            <summary>Ruft einen Wert ab, der angibt, ob die Version der geöffneten Datei bekannt ist. Wenn 
            eine Datei mit einer unbekannten Version gelesen und anschließend gespeichert wird kann es zum 
            Datenverlust kommen.</summary>
        </member>
        <member name="P:SharpAccessory.Imaging.Classification.RuleFile.FormatName">
            <summary>Ruft den Namen des Dateiformats ab.</summary>
            <returns>Rules</returns>
        </member>
        <member name="P:SharpAccessory.Imaging.Classification.RuleFile.FileExtension">
            <summary>Ruft die zu diesem Dateiformat gehörende Dateierweiterung ab.</summary>
            <returns>.xml</returns>
        </member>
        <member name="P:SharpAccessory.Imaging.Classification.RuleFile.Empty">
            <summary>Erzeugt eine leere Datei.</summary>
        </member>
        <member name="T:SharpAccessory.Imaging.IO.MapFile">
            <summary>Speichert und liest Objektebenen in einer Container-Datei.</summary>
        </member>
        <member name="M:SharpAccessory.Imaging.IO.MapFile.#ctor(SharpAccessory.IO.ContainerFile)">
            <summary>Erstellt und initialisiert eine neue Instanz.</summary>
            <param name="file">Gibt die zugrunde liegende Container-Datei an.</param>
        </member>
        <member name="M:SharpAccessory.Imaging.IO.MapFile.CreateNew(System.String)">
            <summary>Erstellt eine neue Container-Datei.</summary>
            <param name="filename">Gibt den Dateinamen der Container-Datei an.</param>
        </member>
        <member name="M:SharpAccessory.Imaging.IO.MapFile.CreateNew(System.String,System.Int32)">
            <summary>Erstellt eine neue Container-Datei.</summary>
            <param name="filename">Gibt den Dateinamen der Container-Datei an.</param>
            <param name="chunkSize">Gibt die Größe der Datenblöcke an.</param>
        </member>
        <member name="M:SharpAccessory.Imaging.IO.MapFile.Open(System.IO.Stream)">
            <summary>Öffnet eine vorhandene Container-Datei.</summary>
            <param name="stream">Der Stream der die Container-Datei enthält.</param>
        </member>
        <member name="M:SharpAccessory.Imaging.IO.MapFile.Open(System.String)">
            <summary>Öffnet eine vorhandene Container-Datei.</summary>
            <param name="filename">Gibt den Dateinamen der Container-Datei an.</param>
        </member>
        <member name="M:SharpAccessory.Imaging.IO.MapFile.Open(System.String,System.IO.FileAccess)">
            <summary>Öffnet eine vorhandene Container-Datei.</summary>
            <param name="filename">Gibt den Dateinamen der Container-Datei an.</param>
            <param name="mode">Gibt die Zugriffsart an.</param>
        </member>
        <member name="M:SharpAccessory.Imaging.IO.MapFile.AddLayer(System.String,SharpAccessory.Imaging.Segmentation.ObjectLayer)">
            <summary>Fügte eine neue Objektebene zur Container-Datei hinzu.</summary>
            <param name="name">Gibt den Namen der Objektebene an.</param>
            <param name="layer">Die Objektebene die hinzugefügt wird.</param>
        </member>
        <member name="M:SharpAccessory.Imaging.IO.MapFile.ContainsLayer(System.String)">
            <summary>Überprüft ob die angegebene Objektebene vorhanden ist.</summary>
            <param name="name">Gibt den Namen der Objektebene an.</param>
        </member>
        <member name="M:SharpAccessory.Imaging.IO.MapFile.DeleteLayer(System.String)">
            <summary>Entfernt die angegebene Objektebene.</summary>
            <param name="name">Gibt den Namen der Objektebene an.</param>
        </member>
        <member name="M:SharpAccessory.Imaging.IO.MapFile.Dispose">
            <summary>Gibt diese Instanz frei.</summary>
        </member>
        <member name="M:SharpAccessory.Imaging.IO.MapFile.GetLayer(System.String)">
            <summary>Ruft die angegebene Objektebene ab.</summary>
            <param name="name">Gibt den Namen der Objektebene an.</param>
        </member>
        <member name="P:SharpAccessory.Imaging.IO.MapFile.LazyWrite">
            <summary>Ruft ab oder legt fest, ob Schreibvorgänge verzögert ausgeführt werden.</summary>
        </member>
        <member name="P:SharpAccessory.Imaging.IO.MapFile.CanChange">
            <summary>Ruft einen Wert ab, der angibt, ob die Container-Datei geändert werden kann.</summary>
        </member>
        <member name="P:SharpAccessory.Imaging.IO.MapFile.Container">
            <summary>Ruft die zugrunde liegende Container-Datei ab.</summary>
        </member>
        <member name="P:SharpAccessory.Imaging.IO.MapFile.IsDisposed">
            <summary>Ruft einen Wert ab, der angibt, ob diese Instanz bereits freigegeben wurde.</summary>
        </member>
        <member name="T:SharpAccessory.Imaging.Segmentation.ForegroundBackgroundBalancer">
            <summary>Ordnet Objekte dem Vorder- oder Hintergrund zu.</summary>
        </member>
        <member name="M:SharpAccessory.Imaging.Segmentation.ForegroundBackgroundBalancer.Execute(SharpAccessory.Imaging.Segmentation.ObjectLayer,SharpAccessory.Imaging.Processors.BitmapProcessor,System.Int32,System.Boolean)">
            <summary>Ordnet Objekte dem Vorder- oder Hintergrund zu.</summary>
            <param name="layer">Enthält die (Kandidaten-) Objekte.</param>
            <param name="p">Bietet Zugriff auf die Bilddaten.</param>
            <param name="distance">Gibt den Toleranz-Abstand zum Bildvordergrund an.</param>
            <param name="iterative">Gibt an, ob die Zuordnung iterativ ausgeführt werden soll.</param>
        </member>
        <member name="M:SharpAccessory.Imaging.Segmentation.ForegroundBackgroundBalancer.Execute(SharpAccessory.Imaging.Segmentation.ObjectLayer,SharpAccessory.Imaging.Processors.GrayscaleProcessor,System.Int32,System.Boolean)">
            <summary>Ordnet Objekte dem Vorder- oder Hintergrund zu.</summary>
            <param name="layer">Enthält die (Kandidaten-) Objekte.</param>
            <param name="p">Bietet Zugriff auf die Bilddaten.</param>
            <param name="distance">Gibt den Toleranz-Abstand zum Bildvordergrund an.</param>
            <param name="iterative">Gibt an, ob die Zuordnung iterativ ausgeführt werden soll.</param>
        </member>
        <member name="T:SharpAccessory.Imaging.Segmentation.µMap">
            <summary>Implementiert IMap mit einem eingeschränkten schreib und lesbaren Bereich.</summary>
        </member>
        <member name="T:SharpAccessory.Imaging.Segmentation.IMap">
            <summary>Abstrahiert den Zugriff auf 2-dimensionale Arrays von Pixeln oder Objekten.</summary>
        </member>
        <member name="P:SharpAccessory.Imaging.Segmentation.IMap.Item(System.Int32,System.Int32)">
            <summary>Ruft den Wert an der Position [x, y] ab, oder legt diesen fest.</summary>
        </member>
        <member name="P:SharpAccessory.Imaging.Segmentation.IMap.Width">
            <summary>Ruft die Breite der Map ab.</summary>
        </member>
        <member name="P:SharpAccessory.Imaging.Segmentation.IMap.Height">
            <summary>Ruft die Höhe der Map ab.</summary>
        </member>
        <member name="P:SharpAccessory.Imaging.Segmentation.IMap.ReadOnly">
            <summary>Ruft einen Wert ab, der angibt, ob die Map schreibgeschützt ist.</summary>
        </member>
        <member name="P:SharpAccessory.Imaging.Segmentation.IMap.IsDisposed">
            <summary>Ruft einen Wert ab, der angibt, ob dieses Objekt bereits freigegeben wurde.</summary>
        </member>
        <member name="M:SharpAccessory.Imaging.Segmentation.µMap.#ctor(System.Int32,System.Int32,System.Drawing.Rectangle)">
            <summary>Erstellt und initialisiert eine neue Instanz.</summary>
            <param name="width">Gibt die Breite der Map an.</param>
            <param name="height">Gibt die Höhe der Map an.</param>
            <param name="bounds">Gibt die Position und Größe des schreib und lesbaren Bereichs an.</param>
        </member>
        <member name="M:SharpAccessory.Imaging.Segmentation.µMap.#ctor(SharpAccessory.Imaging.Segmentation.IMap,System.Drawing.Rectangle)">
            <summary>Erstellt und initialisiert eine neue Instanz.</summary>
            <param name="map">Gibt die zugrunde liegende Map an.</param>
            <param name="bounds">Gibt die Position und Größe des schreib und lesbaren Bereichs an.</param>
        </member>
        <member name="M:SharpAccessory.Imaging.Segmentation.µMap.#ctor(SharpAccessory.Imaging.Segmentation.µMap)">
            <summary>Erstellt eine Kopie der angegebenen Map.</summary>
            <param name="map">Die Map die kopiert wird.</param>
        </member>
        <member name="M:SharpAccessory.Imaging.Segmentation.µMap.GetId(System.Int32,System.Int32)">
            <summary>Ruft die ID an der angegebenen Position ab.</summary>
        </member>
        <member name="M:SharpAccessory.Imaging.Segmentation.µMap.SetId(System.Int32,System.Int32,System.UInt32)">
            <summary>Setzt die ID an der angegebenen Position auf den angegebenen Wert.</summary>
        </member>
        <member name="M:SharpAccessory.Imaging.Segmentation.µMap.Clone">
            <summary>Erzeugt eine Kopie dieser Map.</summary>
        </member>
        <member name="M:SharpAccessory.Imaging.Segmentation.µMap.Dispose">
            <summary>Gibt diese Instanz frei.</summary>
        </member>
        <member name="P:SharpAccessory.Imaging.Segmentation.µMap.Item(System.Int32,System.Int32)">
            <summary>Ruft die ID an der angegebenen Position ab, oder legt diese fest.</summary>
        </member>
        <member name="P:SharpAccessory.Imaging.Segmentation.µMap.Width">
            <summary>Ruft die Breite der Map ab.</summary>
        </member>
        <member name="P:SharpAccessory.Imaging.Segmentation.µMap.Height">
            <summary>Ruft die Höhe der Map ab.</summary>
        </member>
        <member name="P:SharpAccessory.Imaging.Segmentation.µMap.Bounds">
            <summary>Ruft die Position und Größe des schreib und lesbaren Bereichs ab.</summary>
        </member>
        <member name="P:SharpAccessory.Imaging.Segmentation.µMap.Map">
            <summary>Ruft die zugrunde liegende Map ab.</summary>
        </member>
        <member name="P:SharpAccessory.Imaging.Segmentation.µMap.ReadOnly">
            <summary>Ruft einen Wert ab, der angibt, ob diese Map schreibgeschützt ist.</summary>
        </member>
        <member name="P:SharpAccessory.Imaging.Segmentation.µMap.IsDisposed">
            <summary>Ruft einen Wert ab, der angibt, ob diese Instanz bereits freigegeben wurde.</summary>
        </member>
        <member name="T:SharpAccessory.Imaging.Analysis.EdgeDetector">
            <summary>Findet Kanten auf horizontalen und vertikalen Suchlinien. Original Paper: Wienert, S. et al. 
            Detection and Segmentation of Cell Nuclei in Virtual Microscopy Images: A Minimum-Model Approach. 
            Sci. Rep. 2, 503; DOI:10.1038/srep00503 (2012).</summary>
        </member>
        <member name="M:SharpAccessory.Imaging.Analysis.EdgeDetector.FindHorizontalEdges(SharpAccessory.Imaging.Processors.BitmapProcessor,System.Int32)">
            <summary>Findet Kanten auf horizontalen Suchlinien.</summary>
            <param name="processor">Bietet Zugriff auf die Bilddaten.</param>
            <param name="scanLineDistance">Gibt den Abstand der Suchlinien an.</param>
        </member>
        <member name="M:SharpAccessory.Imaging.Analysis.EdgeDetector.FindHorizontalEdges(SharpAccessory.Imaging.Processors.GrayscaleProcessor,System.Int32)">
            <summary>Findet Kanten auf horizontalen Suchlinien.</summary>
            <param name="processor">Bietet Zugriff auf die Bilddaten.</param>
            <param name="scanLineDistance">Gibt den Abstand der Suchlinien an.</param>
        </member>
        <member name="M:SharpAccessory.Imaging.Analysis.EdgeDetector.FindVerticalEdges(SharpAccessory.Imaging.Processors.BitmapProcessor,System.Int32)">
            <summary>Findet Kanten auf vertikalen Suchlinien.</summary>
            <param name="processor">Bietet Zugriff auf die Bilddaten.</param>
            <param name="scanLineDistance">Gibt den Abstand der Suchlinien an.</param>
        </member>
        <member name="M:SharpAccessory.Imaging.Analysis.EdgeDetector.FindVerticalEdges(SharpAccessory.Imaging.Processors.GrayscaleProcessor,System.Int32)">
            <summary>Findet Kanten auf vertikalen Suchlinien.</summary>
            <param name="processor">Bietet Zugriff auf die Bilddaten.</param>
            <param name="scanLineDistance">Gibt den Abstand der Suchlinien an.</param>
        </member>
        <member name="T:SharpAccessory.Imaging.Analysis.EdgeInfo">
            <summary>Repräsentiert eine Kante in einem Graustufenbild. Original Paper: Wienert, S. et al. 
            Detection and Segmentation of Cell Nuclei in Virtual Microscopy Images: A Minimum-Model Approach. 
            Sci. Rep. 2, 503; DOI:10.1038/srep00503 (2012).</summary>
        </member>
        <member name="M:SharpAccessory.Imaging.Analysis.EdgeInfo.#ctor(System.Drawing.Point,System.Drawing.Point,System.Drawing.Point)">
            <summary>Erstellt und initialisiert eine neue Instanz.</summary>
            <param name="min">Gibt die Position des lokalen Minimums an.</param>
            <param name="max">Gibt die Position des lokalen Maximums an.</param>
            <param name="maxGradient">Gibt die Position des maximalen Gradienten an.</param>
        </member>
        <member name="M:SharpAccessory.Imaging.Analysis.EdgeInfo.ToString">
            <summary>Konvertiert diese Instanz in eine lesbare Zeichenfolge.</summary>
        </member>
        <member name="P:SharpAccessory.Imaging.Analysis.EdgeInfo.Min">
            <summary>Ruft die Position des lokalen Minimums ab, oder legt diese fest.</summary>
        </member>
        <member name="P:SharpAccessory.Imaging.Analysis.EdgeInfo.Max">
            <summary>Ruft die Position des lokalen Maximums ab, oder legt diese fest.</summary>
        </member>
        <member name="P:SharpAccessory.Imaging.Analysis.EdgeInfo.MaxGradient">
            <summary>Ruft die Position des maximalen Gradienten ab, oder legt diese fest.</summary>
        </member>
        <member name="P:SharpAccessory.Imaging.Analysis.EdgeInfo.IsEmpty">
            <summary>Ruft einen Wert ab, der angibt, ob alle Werte auf deren Default gesetzt sind.</summary>
        </member>
        <member name="P:SharpAccessory.Imaging.Analysis.EdgeInfo.Empty">
            <summary>Erzeugt eine neue Instanz mit allen Werten auf deren Default gesetzt.</summary>
        </member>
        <member name="T:SharpAccessory.Imaging.Automation.ChainExecutor">
            <summary>Implementiert IImageAnalysisProcess zum Ausführen von Verarbeitungsketten.</summary>
        </member>
        <member name="T:SharpAccessory.Imaging.Automation.LocalProcessBase">
            <summary>Basis-Klasse für Prozesse der Bildverarbeitung die lokal ausgeführt werden.</summary>
        </member>
        <member name="T:SharpAccessory.Imaging.Automation.ImageAnalysisProcessBase">
            <summary>Basis-Klasse für Prozesse der Bildverarbeitung.</summary>
        </member>
        <member name="T:SharpAccessory.Imaging.Automation.IImageAnalysisProcess">
            <summary>Definiert die Schnittstelle zu Prozessen der Bildverarbeitung.</summary>
        </member>
        <member name="M:SharpAccessory.Imaging.Automation.IImageAnalysisProcess.Execute(SharpAccessory.Imaging.Automation.ProcessExecutionParams)">
            <summary>Führt den Prozess aus und blockiert den aufrufenden Thread bis der Prozess beendet wurde.
            </summary>
        </member>
        <member name="M:SharpAccessory.Imaging.Automation.IImageAnalysisProcess.BeginExecute(SharpAccessory.Imaging.Automation.ProcessExecutionParams)">
            <summary>Beginnt die asynchrone Ausführung des Prozesses.</summary>
        </member>
        <member name="M:SharpAccessory.Imaging.Automation.IImageAnalysisProcess.Cancel">
            <summary>Setzt das IsCancellationPending-Flag auf true.</summary>
        </member>
        <member name="P:SharpAccessory.Imaging.Automation.IImageAnalysisProcess.Name">
            <summary>Ruft den Namen des Prozesses ab.</summary>
        </member>
        <member name="P:SharpAccessory.Imaging.Automation.IImageAnalysisProcess.ReportsProgress">
            <summary>Ruft einen Wert ab, der angibt, ob der Prozess das ProgressChanged-Ereignis auslöst.
            </summary>
        </member>
        <member name="P:SharpAccessory.Imaging.Automation.IImageAnalysisProcess.SupportsCancellation">
            <summary>Ruft einen Wert ab, der angibt, ob der Prozess abgebrochen werden kann.</summary>
        </member>
        <member name="P:SharpAccessory.Imaging.Automation.IImageAnalysisProcess.IsCancellationPending">
            <summary>Ruft das IsCancellationPending-Flag ab.</summary>
        </member>
        <member name="E:SharpAccessory.Imaging.Automation.IImageAnalysisProcess.ProgressChanged">
            <summary>Wird ausgelöst, wenn sich der Fortschritt des Prozesses geändert hat.</summary>
        </member>
        <member name="E:SharpAccessory.Imaging.Automation.IImageAnalysisProcess.ProcessFinished">
            <summary>Wird ausgelöst, wenn ein asynchron ausgeführter Prozess beendet wird.</summary>
        </member>
        <member name="M:SharpAccessory.Imaging.Automation.ImageAnalysisProcessBase.#ctor(System.String)">
            <summary>Erstellt und initialisiert eine neue Instanz.</summary>
            <param name="name">Gibt den Namen des Prozesses an.</param>
        </member>
        <member name="M:SharpAccessory.Imaging.Automation.ImageAnalysisProcessBase.Execute(SharpAccessory.Imaging.Automation.ProcessExecutionParams)">
            <summary>Führt den Prozess aus und blockiert den aufrufenden Thread bis der Prozess beendet wurde.
            </summary>
        </member>
        <member name="M:SharpAccessory.Imaging.Automation.ImageAnalysisProcessBase.BeginExecute(SharpAccessory.Imaging.Automation.ProcessExecutionParams)">
            <summary>Beginnt die asynchrone Ausführung des Prozesses.</summary>
        </member>
        <member name="M:SharpAccessory.Imaging.Automation.ImageAnalysisProcessBase.Cancel">
            <summary>Setzt das IsCancellationPending-Flag auf true.</summary>
        </member>
        <member name="M:SharpAccessory.Imaging.Automation.ImageAnalysisProcessBase.SetReportsProgress(System.Boolean)">
            <summary>Setzt die ReportsProgress-Eigenschaft auf den angegebenen Wert.</summary>
        </member>
        <member name="M:SharpAccessory.Imaging.Automation.ImageAnalysisProcessBase.SetSupportsCancellation(System.Boolean)">
            <summary>Setzt die SupportsCancellation-Eigenschaft auf den angegebenen Wert.</summary>
        </member>
        <member name="M:SharpAccessory.Imaging.Automation.ImageAnalysisProcessBase.ResetIsCancellationPending">
            <summary>Setzt das IsCancellationPending-Flag auf false.</summary>
        </member>
        <member name="M:SharpAccessory.Imaging.Automation.ImageAnalysisProcessBase.BeginBackgroundProcess">
            <summary>Beginnt einen neuen Hintergrund-Prozess.</summary>
        </member>
        <member name="M:SharpAccessory.Imaging.Automation.ImageAnalysisProcessBase.WaitForBackgroundProcess">
            <summary>Blockiert den aufrufenden Thread bis der Hintergrund-Prozess beendet wird.</summary>
        </member>
        <member name="M:SharpAccessory.Imaging.Automation.ImageAnalysisProcessBase.DoBackgroundWork">
            <summary>Führt die Berechnungen des Prozesses aus.</summary>
        </member>
        <member name="M:SharpAccessory.Imaging.Automation.ImageAnalysisProcessBase.ReportProgress(System.String,System.Double)">
            <summary>Löst das ProgressChanged-Ereignis aus.</summary>
        </member>
        <member name="M:SharpAccessory.Imaging.Automation.ImageAnalysisProcessBase.ReportProgress(SharpAccessory.Imaging.Automation.ProcessProgressChangedEventArgs)">
            <summary>Löst das ProgressChanged-Ereignis aus.</summary>
        </member>
        <member name="M:SharpAccessory.Imaging.Automation.ImageAnalysisProcessBase.ReportProcessFinished(SharpAccessory.Imaging.Automation.ProcessFinishedEventArgs)">
            <summary>Löst das ProcessFinished-Ereignis aus.</summary>
        </member>
        <member name="P:SharpAccessory.Imaging.Automation.ImageAnalysisProcessBase.Name">
            <summary>Ruft den Namen des Prozesses ab.</summary>
        </member>
        <member name="P:SharpAccessory.Imaging.Automation.ImageAnalysisProcessBase.ReportsProgress">
            <summary>Ruft einen Wert ab, der angibt, ob der Prozess das ProgressChanged-Ereignis auslöst.
            </summary>
        </member>
        <member name="P:SharpAccessory.Imaging.Automation.ImageAnalysisProcessBase.SupportsCancellation">
            <summary>Ruft einen Wert ab, der angibt, ob der Prozess abgebrochen werden kann.</summary>
        </member>
        <member name="P:SharpAccessory.Imaging.Automation.ImageAnalysisProcessBase.IsCancellationPending">
            <summary>Ruft das IsCancellationPending-Flag ab.</summary>
        </member>
        <member name="E:SharpAccessory.Imaging.Automation.ImageAnalysisProcessBase.ProgressChanged">
            <summary>Wird ausgelöst, wenn sich der Fortschritt des Prozesses geändert hat.</summary>
        </member>
        <member name="E:SharpAccessory.Imaging.Automation.ImageAnalysisProcessBase.ProcessFinished">
            <summary>Wird ausgelöst, wenn ein asynchron ausgeführter Prozess beendet wird.</summary>
        </member>
        <member name="M:SharpAccessory.Imaging.Automation.LocalProcessBase.#ctor(System.String)">
            <summary>Erstellt und initialisiert eine neue Instanz.</summary>
            <param name="name">Gibt den Namen des Prozesses an.</param>
        </member>
        <member name="M:SharpAccessory.Imaging.Automation.LocalProcessBase.BeginExecute(SharpAccessory.Imaging.Automation.ProcessExecutionParams)">
            <summary>Beginnt die asynchrone Ausführung des Prozesses.</summary>
        </member>
        <member name="M:SharpAccessory.Imaging.Automation.LocalProcessBase.DoBackgroundWork">
            <summary>Führt die Execute-Methode aus und löst das ProcessFinished-Ereignis aus.</summary>
        </member>
        <member name="M:SharpAccessory.Imaging.Automation.ChainExecutor.#ctor(SharpAccessory.Imaging.Automation.ImageProcessingChain,System.String)">
            <summary>Erstellt und initialisiert eine neue Instanz.</summary>
            <param name="chain">Enthält die auszuführenden Verarbeitungsschritte.</param>
            <param name="name">Gibt den Namen des Prozesses an.</param>
        </member>
        <member name="M:SharpAccessory.Imaging.Automation.ChainExecutor.Execute(SharpAccessory.Imaging.Automation.ProcessExecutionParams)">
            <summary>Führt den Prozess aus und blockiert den aufrufenden Thread bis der Prozess beendet wurde.
            </summary>
        </member>
        <member name="P:SharpAccessory.Imaging.Automation.ChainExecutor.LibPath">
            <summary>Ruft die Zeichenfolge ab, die mit der Compiler-Option /lib angegeben wird, oder legt 
            diese fest.</summary>
        </member>
        <member name="P:SharpAccessory.Imaging.Automation.ChainExecutor.Chain">
            <summary>Ruft die Verarbeitungskette ab die ausgeführt wird.</summary>
        </member>
        <member name="T:SharpAccessory.Imaging.Automation.ImagePartitioner">
            <summary>Partitioniert ein Bild in einzelne Bildkacheln.</summary>
        </member>
        <member name="M:SharpAccessory.Imaging.Automation.ImagePartitioner.#ctor">
            <summary>Erstellt und initialisiert eine neue Instanz.</summary>
        </member>
        <member name="M:SharpAccessory.Imaging.Automation.ImagePartitioner.#ctor(System.Drawing.Size,System.Drawing.Size,System.Drawing.Size)">
            <summary>Erstellt und initialisiert eine neue Instanz.</summary>
            <param name="imageSize">Gibt die Größe des Bildes an.</param>
            <param name="tileSize">Gibt die Größe der Bildkacheln an.</param>
            <param name="overlap">Gibt die Überlappung der Bildkacheln an.</param>
        </member>
        <member name="M:SharpAccessory.Imaging.Automation.ImagePartitioner.Change(System.Drawing.Size,System.Drawing.Size,System.Drawing.Size)">
            <summary>Ändert die Partitionierung und setzt den Enumerator zurück.</summary>
            <param name="imageSize">Gibt die Größe des Bildes an.</param>
            <param name="tileSize">Gibt die Größe der Bildkacheln an.</param>
            <param name="overlap">Gibt die Überlappung der Bildkacheln an.</param>
        </member>
        <member name="M:SharpAccessory.Imaging.Automation.ImagePartitioner.Reset">
            <summary>Setzt den Enumerator auf seine anfängliche Position vor der ersten Bildkachel.</summary>
        </member>
        <member name="M:SharpAccessory.Imaging.Automation.ImagePartitioner.MoveNext">
            <summary>Setzt den Enumerator auf die nächste Bildkachel.</summary>
        </member>
        <member name="M:SharpAccessory.Imaging.Automation.ImagePartitioner.Dispose">
            <summary>Diese Methode ist für diese Klasse nicht relevant.</summary>
        </member>
        <member name="P:SharpAccessory.Imaging.Automation.ImagePartitioner.ImageSize">
            <summary>Ruft die Größe des Bildes ab.</summary>
        </member>
        <member name="P:SharpAccessory.Imaging.Automation.ImagePartitioner.TileSize">
            <summary>Ruft die Größe der Bildkacheln ab.</summary>
        </member>
        <member name="P:SharpAccessory.Imaging.Automation.ImagePartitioner.Overlap">
            <summary>Ruft die Überlappung der Bildkacheln ab.</summary>
        </member>
        <member name="P:SharpAccessory.Imaging.Automation.ImagePartitioner.Current">
            <summary>Ruft die Position und Größe der aktuellen Bildkachel ab.</summary>
        </member>
        <member name="T:SharpAccessory.Imaging.Automation.ImageProcessingStepCollection">
            <summary>Verwaltet eine Liste von Verarbeitungsschritten.</summary>
        </member>
        <member name="T:SharpAccessory.Imaging.Automation.ImageProcessingChain">
            <summary>Liest und schreibt ImageProcessingChain-Dateien.</summary>
        </member>
        <member name="M:SharpAccessory.Imaging.Automation.ImageProcessingChain.#ctor">
            <summary>Erstellt und initialisiert eine neue Instanz.</summary>
        </member>
        <member name="M:SharpAccessory.Imaging.Automation.ImageProcessingChain.FromFile(System.String)">
            <summary>Öffnet und liest die angegebene ImageProcessingChain-Datei.</summary>
        </member>
        <member name="M:SharpAccessory.Imaging.Automation.ImageProcessingChain.FromBuffer(System.Byte[])">
            <summary>Liest eine ImageProcessingChain-Datei aus dem angegebenen Puffer.</summary>
        </member>
        <member name="M:SharpAccessory.Imaging.Automation.ImageProcessingChain.FromStream(System.IO.Stream)">
            <summary>Liest eine ImageProcessingChain-Datei aus dem angegebenen Stream.</summary>
        </member>
        <member name="M:SharpAccessory.Imaging.Automation.ImageProcessingChain.FromXmlDoc(System.Xml.XmlDocument)">
            <summary>Liest eine ImageProcessingChain-Datei aus dem angegebenen XML-Dokument.</summary>
        </member>
        <member name="M:SharpAccessory.Imaging.Automation.ImageProcessingChain.SaveToFile(System.String)">
            <summary>Speichert den aktuellen Inhalt in die angegebene Datei.</summary>
        </member>
        <member name="M:SharpAccessory.Imaging.Automation.ImageProcessingChain.SaveToBuffer">
            <summary>Speichert den aktuellen Inhalt in einen neuen Puffer.</summary>
        </member>
        <member name="P:SharpAccessory.Imaging.Automation.ImageProcessingChain.ProcessingSteps">
            <summary>Ruft die Liste der Verarbeitungsschritte ab.</summary>
        </member>
        <member name="P:SharpAccessory.Imaging.Automation.ImageProcessingChain.IsWellKnownVersion">
            <summary>Ruft einen Wert ab, der angibt, ob die Version der geöffneten Datei bekannt ist. Wenn 
            eine Datei mit einer unbekannten Version gelesen und anschließend gespeichert wird kann es zum 
            Datenverlust kommen.</summary>
        </member>
        <member name="P:SharpAccessory.Imaging.Automation.ImageProcessingChain.FormatName">
            <summary>Ruft den Namen des Dateiformats ab.</summary>
            <returns>ImageProcessingChain</returns>
        </member>
        <member name="P:SharpAccessory.Imaging.Automation.ImageProcessingChain.FileExtension">
            <summary>Ruft die zu diesem Dateiformat gehörende Dateierweiterung ab.</summary>
            <returns>.xml</returns>
        </member>
        <member name="P:SharpAccessory.Imaging.Automation.ImageProcessingChain.Empty">
            <summary>Erzeugt eine leere Datei.</summary>
        </member>
        <member name="T:SharpAccessory.Imaging.Automation.ImageProcessingStep">
            <summary>Verarbeitungsschritt einer Verarbeitungskette.</summary>
        </member>
        <member name="M:SharpAccessory.Imaging.Automation.ImageProcessingStep.#ctor(System.String,System.String)">
            <summary>Erstellt und initialisiert eine neue Instanz.</summary>
            <param name="name">Gibt den Namen des Verarbeitungsschritts an.</param>
            <param name="source">Gibt den Quelltext des Verarbeitungsschritts an.</param>
        </member>
        <member name="M:SharpAccessory.Imaging.Automation.ImageProcessingStep.#ctor(System.String,System.String,SharpAccessory.Collections.KeyValuePair[])">
            <summary>Erstellt und initialisiert eine neue Instanz.</summary>
            <param name="name">Gibt den Namen des Verarbeitungsschritts an.</param>
            <param name="source">Gibt den Quelltext des Verarbeitungsschritts an.</param>
            <param name="arguments">Gibt die Argumente für diesen Verarbeitungsschritt an.</param>
        </member>
        <member name="M:SharpAccessory.Imaging.Automation.ImageProcessingStep.ToString">
            <summary>Konvertiert diese Instanz in eine lesbare Zeichenfolge.</summary>
        </member>
        <member name="P:SharpAccessory.Imaging.Automation.ImageProcessingStep.Name">
            <summary>Ruft den Namen des Verarbeitungsschritts ab, oder legt diesen fest.</summary>
        </member>
        <member name="P:SharpAccessory.Imaging.Automation.ImageProcessingStep.Source">
            <summary>Ruft den Quelltext des Verarbeitungsschritts ab, oder legt diesen fest.</summary>
        </member>
        <member name="P:SharpAccessory.Imaging.Automation.ImageProcessingStep.Arguments">
            <summary>Ruft die Liste der Argumente für diesen Verarbeitungsschritt ab.</summary>
        </member>
        <member name="P:SharpAccessory.Imaging.Automation.ImageProcessingStep.IsEmpty">
            <summary>Ruft einen Wert ab, der angibt, ob alle Werte auf deren Default gesetzt sind.</summary>
        </member>
        <member name="P:SharpAccessory.Imaging.Automation.ImageProcessingStep.Empty">
            <summary>Erzeugt eine neue Instanz mit allen Werten auf deren Default gesetzt.</summary>
        </member>
        <member name="T:SharpAccessory.Imaging.Automation.ProcessExecutionParams">
            <summary>Bietet Zugriff auf Parameter zum Ausführen von Bildanalyse-Prozessen.</summary>
        </member>
        <member name="M:SharpAccessory.Imaging.Automation.ProcessExecutionParams.#ctor(System.Drawing.Bitmap)">
            <summary>Erstellt und initialisiert eine neue Instanz.</summary>
            <param name="bitmap">Gibt die Bildkachel an, die verarbeitet werden soll.</param>
        </member>
        <member name="M:SharpAccessory.Imaging.Automation.ProcessExecutionParams.#ctor(System.Drawing.Bitmap,SharpAccessory.Collections.KeyValuePair[])">
            <summary>Erstellt und initialisiert eine neue Instanz.</summary>
            <param name="bitmap">Gibt die Bildkachel an, die verarbeitet werden soll.</param>
            <param name="arguments">Gibt die Liste der Argumente an.</param>
        </member>
        <member name="M:SharpAccessory.Imaging.Automation.ProcessExecutionParams.#ctor(System.Drawing.Bitmap,SharpAccessory.Collections.KeyValuePair[],SharpAccessory.Imaging.Segmentation.ObjectLayer[])">
            <summary>Erstellt und initialisiert eine neue Instanz.</summary>
            <param name="bitmap">Gibt die Bildkachel an, die verarbeitet werden soll.</param>
            <param name="arguments">Gibt die Liste der Argumente an.</param>
            <param name="layers">Gibt die Liste der bereits vorhandenen Objektebenen an.</param>
        </member>
        <member name="P:SharpAccessory.Imaging.Automation.ProcessExecutionParams.Bitmap">
            <summary>Ruft die Bildkachel ab, die verarbeitet werden soll.</summary>
        </member>
        <member name="P:SharpAccessory.Imaging.Automation.ProcessExecutionParams.Arguments">
            <summary>Ruft die Liste der Argumente ab.</summary>
        </member>
        <member name="P:SharpAccessory.Imaging.Automation.ProcessExecutionParams.Layers">
            <summary>Ruft die Liste der bereits vorhandenen Objektebenen ab.</summary>
        </member>
        <member name="T:SharpAccessory.Imaging.Automation.ProcessFinishedEventArgs">
            <summary>Stellt Daten für ein ProcessFinished-Ereignis bereit.</summary>
        </member>
        <member name="M:SharpAccessory.Imaging.Automation.ProcessFinishedEventArgs.#ctor(SharpAccessory.Imaging.Automation.ProcessResult)">
            <summary>Erstellt und initialisiert eine neue Instanz.</summary>
            <param name="result">Gibt das Ergebnis des Prozesses an.</param>
        </member>
        <member name="M:SharpAccessory.Imaging.Automation.ProcessFinishedEventArgs.#ctor(System.Exception)">
            <summary>Erstellt und initialisiert eine neue Instanz.</summary>
            <param name="exception">Gibt die Ausnahme an die während der Ausführung aufgetreten ist.</param>
        </member>
        <member name="M:SharpAccessory.Imaging.Automation.ProcessFinishedEventArgs.#ctor(System.Boolean)">
            <summary>Erstellt und initialisiert eine neue Instanz.</summary>
            <param name="cancelled">Gibt an, ob der Prozess abgebrochen wurde.</param>
        </member>
        <member name="M:SharpAccessory.Imaging.Automation.ProcessFinishedEventArgs.#ctor(SharpAccessory.Imaging.Automation.ProcessResult,System.Boolean)">
            <summary>Erstellt und initialisiert eine neue Instanz.</summary>
            <param name="result">Gibt das Ergebnis des Prozesses an.</param>
            <param name="cancelled">Gibt an, ob der Prozess abgebrochen wurde.</param>
        </member>
        <member name="P:SharpAccessory.Imaging.Automation.ProcessFinishedEventArgs.Cancelled">
            <summary>Ruft ab, ob der Prozess abgebrochen wurde.</summary>
        </member>
        <member name="P:SharpAccessory.Imaging.Automation.ProcessFinishedEventArgs.Exception">
            <summary>Ruft die Ausnahme ab die während der Ausführung aufgetreten ist.</summary>
        </member>
        <member name="P:SharpAccessory.Imaging.Automation.ProcessFinishedEventArgs.Result">
            <summary>Ruft das Ergebnis des Prozesses ab.</summary>
        </member>
        <member name="T:SharpAccessory.Imaging.Automation.ProcessFinishedEventHandler">
            <summary>Methode die ein ProcessFinished-Ereignis verarbeitet.</summary>
        </member>
        <member name="T:SharpAccessory.Imaging.Automation.ProcessProgressChangedEventArgs">
            <summary>Stellt Daten für ein ProgressChanged-Ereignis bereit.</summary>
        </member>
        <member name="M:SharpAccessory.Imaging.Automation.ProcessProgressChangedEventArgs.#ctor(System.String,System.Double)">
            <summary>Erstellt und initialisiert eine neue Instanz.</summary>
            <param name="text">Gibt den Status-Text des Prozesses an.</param>
            <param name="progressPercentage">Gibt den Fortschritt in Prozent an.</param>
        </member>
        <member name="P:SharpAccessory.Imaging.Automation.ProcessProgressChangedEventArgs.ProgressPercentage">
            <summary>Ruft den Fortschritt in Prozent ab.</summary>
        </member>
        <member name="P:SharpAccessory.Imaging.Automation.ProcessProgressChangedEventArgs.Text">
            <summary>Ruft den Status-Text des Prozesses ab.</summary>
        </member>
        <member name="T:SharpAccessory.Imaging.Automation.ProcessProgressChangedEventHandler">
            <summary>Methode die ein ProgressChanged-Ereignis verarbeitet.</summary>
        </member>
        <member name="T:SharpAccessory.Imaging.Automation.ProcessResult">
            <summary>Bietet Zugriff auf das Ergebnis eines Bildanalyse-Prozesses.</summary>
        </member>
        <member name="M:SharpAccessory.Imaging.Automation.ProcessResult.#ctor">
            <summary>Erstellt und initialisiert eine neue Instanz.</summary>
        </member>
        <member name="M:SharpAccessory.Imaging.Automation.ProcessResult.#ctor(SharpAccessory.Imaging.Segmentation.ObjectLayer[])">
            <summary>Erstellt und initialisiert eine neue Instanz.</summary>
            <param name="layers">Gibt die Liste der Objektebenen an.</param>
        </member>
        <member name="P:SharpAccessory.Imaging.Automation.ProcessResult.Layers">
            <summary>Ruft die Liste der Objektebenen ab.</summary>
        </member>
        <member name="T:SharpAccessory.Imaging.Automation.Report">
            <summary>Fügt Bilder, Überschrift und Fußzeile zu einem Dokument zusammen.</summary>
        </member>
        <member name="M:SharpAccessory.Imaging.Automation.Report.#ctor">
            <summary>Erstellt und initialisiert eine neue Instanz.</summary>
        </member>
        <member name="M:SharpAccessory.Imaging.Automation.Report.Dispose">
            <summary>Gibt diese Instanz frei.</summary>
        </member>
        <member name="M:SharpAccessory.Imaging.Automation.Report.Generate">
            <summary>Erstellt den Report als System.Drawing.Bitmap.</summary>
        </member>
        <member name="P:SharpAccessory.Imaging.Automation.Report.Caption">
            <summary>Ruft die Überschrift des Reports ab, oder legt diese fest.</summary>
        </member>
        <member name="P:SharpAccessory.Imaging.Automation.Report.Footer">
            <summary>Ruft die Fußzeile des Reports ab, oder legt diese fest.</summary>
        </member>
        <member name="P:SharpAccessory.Imaging.Automation.Report.HFont">
            <summary>Ruft die Schriftart für die Überschrift ab, oder legt diese fest.</summary>
        </member>
        <member name="P:SharpAccessory.Imaging.Automation.Report.LFont">
            <summary>Ruft die Schriftart für die Fußzeile ab, oder legt diese fest.</summary>
        </member>
        <member name="P:SharpAccessory.Imaging.Automation.Report.Images">
            <summary>Ruft die Liste der Bilder ab die in den Report aufgenommen werden.</summary>
        </member>
        <member name="P:SharpAccessory.Imaging.Automation.Report.IsDisposed">
            <summary>Ruft einen Wert ab, der angibt, ob diese Instanz bereits freigegeben wurde.</summary>
        </member>
        <member name="T:SharpAccessory.Imaging.Automation.Report.ImageCollection">
            <summary>Verwaltet eine Liste von Bildern.</summary>
        </member>
        <member name="T:SharpAccessory.Imaging.Automation.ReportLayout">
            <summary>Berechnet das Layout für SharpAccessory.Imaging.Automation.Report.</summary>
        </member>
        <member name="M:SharpAccessory.Imaging.Automation.ReportLayout.#ctor(SharpAccessory.Imaging.Automation.Report)">
            <summary>Berechnet und erstellt das Layout für den angegebenen Report.</summary>
        </member>
        <member name="P:SharpAccessory.Imaging.Automation.ReportLayout.CaptionLayout">
            <summary>Ruft die Position und Größe zum Rendern der Überschrift ab.</summary>
        </member>
        <member name="P:SharpAccessory.Imaging.Automation.ReportLayout.ImageLayouts">
            <summary>Ruft die Position und Größe zum Rendern der Bilder ab.</summary>
        </member>
        <member name="P:SharpAccessory.Imaging.Automation.ReportLayout.Separator">
            <summary>Ruft die Position und Größe der Trennlinie ab.</summary>
        </member>
        <member name="P:SharpAccessory.Imaging.Automation.ReportLayout.FooterLayout">
            <summary>Ruft die Position und Größe zum Rendern der Fußzeile ab.</summary>
        </member>
        <member name="P:SharpAccessory.Imaging.Automation.ReportLayout.Size">
            <summary>Ruft die Höhe und Breite für den Report ab.</summary>
        </member>
        <member name="T:SharpAccessory.Imaging.Automation.ReportLayout.LayoutCollection">
            <summary>Verwaltet eine Liste von Layouts.</summary>
        </member>
        <member name="M:SharpAccessory.Imaging.Automation.ReportLayout.LayoutCollection.#ctor(System.Drawing.Rectangle[])">
            <summary>Erstellt und initialisiert eine neue Instanz.</summary>
        </member>
        <member name="T:SharpAccessory.Imaging.Automation.ScriptCompiler">
            <summary>Kompiliert C#-Skriptdateien.</summary>
        </member>
        <member name="M:SharpAccessory.Imaging.Automation.ScriptCompiler.#ctor">
            <summary>Erstellt und initialisiert eine neue Instanz.</summary>
        </member>
        <member name="M:SharpAccessory.Imaging.Automation.ScriptCompiler.Compile(System.String)">
            <summary>Kompiliert das angegebene Skript.</summary>
            <param name="scriptCode">Gibt den C#-Skriptcode an.</param>
        </member>
        <member name="M:SharpAccessory.Imaging.Automation.ScriptCompiler.CreateInstance``1(System.String)">
            <summary>Kompiliert das angegebene Skript und instanziert den ersten zutreffenden Typ.</summary>
            <param name="scriptCode">Gibt den C#-Skriptcode an.</param>
        </member>
        <member name="M:SharpAccessory.Imaging.Automation.ScriptCompiler.CreateInstance``1(System.Reflection.Assembly)">
            <summary>Instanziert den ersten zutreffenden Typ.</summary>
            <param name="assembly">Gibt die Assembly an die durchsucht wird.</param>
        </member>
        <member name="M:SharpAccessory.Imaging.Automation.ScriptCompiler.CreateProcess(System.String)">
            <summary>Kompiliert das angegebene Skript und instanziert den ersten Typ der 
            IImageAnalysisProcess implementiert.</summary>
            <param name="scriptCode">Gibt den C#-Skriptcode an.</param>
        </member>
        <member name="M:SharpAccessory.Imaging.Automation.ScriptCompiler.CreateProcess(System.Reflection.Assembly)">
            <summary>Findet und instanziert den ersten Typ der IImageAnalysisProcess implementiert.</summary>
            <param name="assembly">Gibt die Assembly an die durchsucht wird.</param>
        </member>
        <member name="M:SharpAccessory.Imaging.Automation.ScriptCompiler.FindArguments(System.String)">
            <summary>Findet die erforderlichen Argumente mit den angegebenen Default-Werten.</summary>
            <param name="scriptCode">Gibt den C#-Skriptcode an.</param>
        </member>
        <member name="M:SharpAccessory.Imaging.Automation.ScriptCompiler.FindReferencedAssemblies(System.String)">
            <summary>Findet die referenzierten Assemblies.</summary>
            <param name="scriptCode">Gibt den C#-Skriptcode an.</param>
        </member>
        <member name="M:SharpAccessory.Imaging.Automation.ScriptCompiler.GetCSharpCode(System.String)">
            <summary>Konvertiert den Scriptcode in einen gültigen C#-Code.</summary>
            <param name="scriptCode">Gibt den C#-Skriptcode an.</param>
        </member>
        <member name="P:SharpAccessory.Imaging.Automation.ScriptCompiler.LibPath">
            <summary>Ruft die Zeichenfolge ab, die mit der Compiler-Option /lib angegeben wird, oder legt 
            diese fest.</summary>
        </member>
        <member name="T:SharpAccessory.Imaging.Automation.ScriptException">
            <summary>Exception die ausgelöst wird wenn ein C#-Skript fehlerhaft ist.</summary>
        </member>
        <member name="M:SharpAccessory.Imaging.Automation.ScriptException.#ctor(System.CodeDom.Compiler.CompilerErrorCollection)">
            <summary>Erstellt und initialisiert eine neue Instanz.</summary>
            <param name="compilerErrors">Gibt die Auflistung von Kompilerfehlern und Warnungen an.</param>
        </member>
        <member name="P:SharpAccessory.Imaging.Automation.ScriptException.CompilerErrors">
            <summary>Ruft die Auflistung von Kompilerfehlern und Warnungen ab.</summary>
        </member>
        <member name="T:SharpAccessory.Imaging.Classification.Class">
            <summary>Repräsentiert eine Klasse.</summary>
        </member>
        <member name="M:SharpAccessory.Imaging.Classification.Class.#ctor">
            <summary>Erzeugt eine neue Klasse mit den Standard-Werten.</summary>
        </member>
        <member name="M:SharpAccessory.Imaging.Classification.Class.#ctor(System.String,System.Drawing.Color)">
            <summary>Erzeugt eine neue Klasse mit den angegebenen Werten.</summary>
        </member>
        <member name="M:SharpAccessory.Imaging.Classification.Class.ToString">
            <summary>Ruft den Namen der Klasse ab.</summary>
        </member>
        <member name="P:SharpAccessory.Imaging.Classification.Class.Name">
            <summary>Ruft den Namen der Klasse ab, oder legt diesen fest.</summary>
        </member>
        <member name="P:SharpAccessory.Imaging.Classification.Class.Color">
            <summary>Ruft die Farbe ab die dieser Klasse zugeordnet ist, oder legt diese fest.</summary>
        </member>
        <member name="T:SharpAccessory.Imaging.Classification.Feature">
            <summary>Basis-Klasse für Features.</summary>
        </member>
        <member name="M:SharpAccessory.Imaging.Classification.Feature.#ctor(System.String,System.Double)">
            <summary>Erstellt und initialisiert eine neue Instanz.</summary>
            <param name="name">Gibt den Namen des Features an.</param>
            <param name="value">Gibt den Wert des Features an.</param>
        </member>
        <member name="M:SharpAccessory.Imaging.Classification.Feature.ToString">
            <summary>Konvertiert diese Instanz in eine lesbare Zeichenfolge.</summary>
        </member>
        <member name="P:SharpAccessory.Imaging.Classification.Feature.Name">
            <summary>Ruft den Namen des Features ab.</summary>
        </member>
        <member name="P:SharpAccessory.Imaging.Classification.Feature.Value">
            <summary>Ruft den Wert des Features ab.</summary>
        </member>
        <member name="T:SharpAccessory.Imaging.Classification.FeatureCollection">
            <summary>Verwaltet eine Liste von Features.</summary>
        </member>
        <member name="M:SharpAccessory.Imaging.Classification.FeatureCollection.#ctor">
            <summary>Erstellt und initialisiert eine neue Instanz.</summary>
        </member>
        <member name="M:SharpAccessory.Imaging.Classification.FeatureCollection.Add(SharpAccessory.Imaging.Classification.Feature)">
            <summary>Fügt das angegebene Feature am Ende der Auflistung hinzu.</summary>
        </member>
        <member name="M:SharpAccessory.Imaging.Classification.FeatureCollection.AddRange(SharpAccessory.Imaging.Classification.Feature[])">
            <summary>Fügt die angegebenen Features am Ende der Auflistung hinzu.</summary>
        </member>
        <member name="M:SharpAccessory.Imaging.Classification.FeatureCollection.Clear">
            <summary>Entfernt alle Features aus der Auflistung.</summary>
        </member>
        <member name="M:SharpAccessory.Imaging.Classification.FeatureCollection.Contains(System.String)">
            <summary>Überprüft ob das angegebene Feature in der Auflistung enthalten ist.</summary>
        </member>
        <member name="M:SharpAccessory.Imaging.Classification.FeatureCollection.GetFeatureByName(System.String)">
            <summary>Ruft das Feature mit dem angegebenen Namen ab.</summary>
        </member>
        <member name="M:SharpAccessory.Imaging.Classification.FeatureCollection.IndexOf(System.String)">
            <summary>Sucht das angegebene Feature in der Auflistung und gibt dessen Index zurück.</summary>
        </member>
        <member name="M:SharpAccessory.Imaging.Classification.FeatureCollection.Insert(System.Int32,SharpAccessory.Imaging.Classification.Feature)">
            <summary>Fügt das angegebene Feature an der angegebenen Position ein.</summary>
        </member>
        <member name="M:SharpAccessory.Imaging.Classification.FeatureCollection.Remove(System.String)">
            <summary>Entfernt das angegebene Feature aus der Auflistung.</summary>
        </member>
        <member name="M:SharpAccessory.Imaging.Classification.FeatureCollection.Remove(SharpAccessory.Imaging.Classification.Feature)">
            <summary>Entfernt das angegebene Feature aus der Auflistung.</summary>
        </member>
        <member name="M:SharpAccessory.Imaging.Classification.FeatureCollection.RemoveAt(System.Int32)">
            <summary>Entfernt das Feature an der angegebenen Position aus der Auflistung.</summary>
        </member>
        <member name="P:SharpAccessory.Imaging.Classification.FeatureCollection.Item(System.String)">
            <summary>Ruft das Feature mit dem angegebenen Namen ab.</summary>
        </member>
        <member name="T:SharpAccessory.Imaging.Classification.FeatureNotFoundException">
            <summary>Exception die ausgelöst wird wenn ein Feature nicht gefunden werden konnte.</summary>
        </member>
        <member name="M:SharpAccessory.Imaging.Classification.FeatureNotFoundException.#ctor(System.String)">
            <summary>Erstellt und initialisiert eine neue Instanz.</summary>
            <param name="name">Gibt den Namen des Features an das nicht gefunden werden konnte.</param>
        </member>
        <member name="M:SharpAccessory.Imaging.Classification.FeatureNotFoundException.#ctor(System.String,System.String)">
            <summary>Erstellt und initialisiert eine neue Instanz.</summary>
            <param name="message">Die Meldung, in der der Fehler beschrieben wird.</param>
            <param name="name">Gibt den Namen des Features an das nicht gefunden werden konnte.</param>
        </member>
        <member name="P:SharpAccessory.Imaging.Classification.FeatureNotFoundException.Name">
            <summary>Ruft den Namen des Features ab das nicht gefunden werden konnte.</summary>
        </member>
        <member name="T:SharpAccessory.Imaging.Classification.Features.Color.MeanIntensity">
            <summary>Berechnet die mittlere Intensität von Objekten.</summary>
        </member>
        <member name="M:SharpAccessory.Imaging.Classification.Features.Color.MeanIntensity.#ctor(System.Double)">
            <summary>Erstellt und initialisiert eine neue Instanz.</summary>
            <param name="value">Gibt den Wert des Features an.</param>
        </member>
        <member name="M:SharpAccessory.Imaging.Classification.Features.Color.MeanIntensity.ProcessLayer(SharpAccessory.Imaging.Segmentation.ObjectLayer,SharpAccessory.Imaging.Processors.BitmapProcessor)">
            <summary>Berechnet dieses Feature für alle Objekte der angegebenen Objektebene.</summary>
            <param name="layer">Gibt die Objektebene an für die das Feature berechnet wird.</param>
            <param name="processor">Bietet Zugriff auf die Bilddaten.</param>
        </member>
        <member name="M:SharpAccessory.Imaging.Classification.Features.Color.MeanIntensity.ProcessLayer(SharpAccessory.Imaging.Segmentation.ObjectLayer,SharpAccessory.Imaging.Processors.GrayscaleProcessor)">
            <summary>Berechnet dieses Feature für alle Objekte der angegebenen Objektebene.</summary>
            <param name="layer">Gibt die Objektebene an für die das Feature berechnet wird.</param>
            <param name="processor">Bietet Zugriff auf die Bilddaten.</param>
        </member>
        <member name="M:SharpAccessory.Imaging.Classification.Features.Color.MeanIntensity.GetValue(SharpAccessory.Imaging.Segmentation.ImageObject,SharpAccessory.Imaging.Processors.BitmapProcessor)">
            <summary>Berechnet den Wert des Features für das angegebene Objekt.</summary>
            <param name="imageObject">Gibt das Objekt an für das das Feature berechnet wird.</param>
            <param name="processor">Bietet Zugriff auf die Bilddaten.</param>
        </member>
        <member name="M:SharpAccessory.Imaging.Classification.Features.Color.MeanIntensity.GetValue(SharpAccessory.Imaging.Segmentation.ImageObject,SharpAccessory.Imaging.Processors.GrayscaleProcessor)">
            <summary>Berechnet den Wert des Features für das angegebene Objekt.</summary>
            <param name="imageObject">Gibt das Objekt an für das das Feature berechnet wird.</param>
            <param name="processor">Bietet Zugriff auf die Bilddaten.</param>
        </member>
        <member name="T:SharpAccessory.Imaging.Classification.Features.Color.MeanIntensityOnContour">
            <summary>Berechnet die mittlere Intensität der Konturpixel von Objekten.</summary>
        </member>
        <member name="M:SharpAccessory.Imaging.Classification.Features.Color.MeanIntensityOnContour.#ctor(System.Double)">
            <summary>Erstellt und initialisiert eine neue Instanz.</summary>
            <param name="value">Gibt den Wert des Features an.</param>
        </member>
        <member name="M:SharpAccessory.Imaging.Classification.Features.Color.MeanIntensityOnContour.ProcessLayer(SharpAccessory.Imaging.Segmentation.ObjectLayer,SharpAccessory.Imaging.Processors.BitmapProcessor)">
            <summary>Berechnet dieses Feature für alle Objekte der angegebenen Objektebene.</summary>
            <param name="layer">Gibt die Objektebene an für die das Feature berechnet wird.</param>
            <param name="processor">Bietet Zugriff auf die Bilddaten.</param>
        </member>
        <member name="M:SharpAccessory.Imaging.Classification.Features.Color.MeanIntensityOnContour.ProcessLayer(SharpAccessory.Imaging.Segmentation.ObjectLayer,SharpAccessory.Imaging.Processors.GrayscaleProcessor)">
            <summary>Berechnet dieses Feature für alle Objekte der angegebenen Objektebene.</summary>
            <param name="layer">Gibt die Objektebene an für die das Feature berechnet wird.</param>
            <param name="processor">Bietet Zugriff auf die Bilddaten.</param>
        </member>
        <member name="M:SharpAccessory.Imaging.Classification.Features.Color.MeanIntensityOnContour.GetValue(SharpAccessory.Imaging.Segmentation.Contour,SharpAccessory.Imaging.Processors.BitmapProcessor)">
            <summary>Berechnet den Wert des Features für die angegebene Kontur.</summary>
            <param name="contour">Gibt die Kontur des Objekts an für das das Feature berechnet wird.</param>
            <param name="processor">Bietet Zugriff auf die Bilddaten.</param>
        </member>
        <member name="M:SharpAccessory.Imaging.Classification.Features.Color.MeanIntensityOnContour.GetValue(SharpAccessory.Imaging.Segmentation.Contour,SharpAccessory.Imaging.Processors.GrayscaleProcessor)">
            <summary>Berechnet den Wert des Features für die angegebene Kontur.</summary>
            <param name="contour">Gibt die Kontur des Objekts an für das das Feature berechnet wird.</param>
            <param name="processor">Bietet Zugriff auf die Bilddaten.</param>
        </member>
        <member name="T:SharpAccessory.Imaging.Classification.Features.Color.StdDevIntensity">
            <summary>Berechnet die Standardabweichung der Intensität von Objekten.</summary>
        </member>
        <member name="M:SharpAccessory.Imaging.Classification.Features.Color.StdDevIntensity.#ctor(System.Double)">
            <summary>Erstellt und initialisiert eine neue Instanz.</summary>
            <param name="value">Gibt den Wert des Features an.</param>
        </member>
        <member name="M:SharpAccessory.Imaging.Classification.Features.Color.StdDevIntensity.ProcessLayer(SharpAccessory.Imaging.Segmentation.ObjectLayer,SharpAccessory.Imaging.Processors.BitmapProcessor)">
            <summary>Berechnet dieses Feature für alle Objekte der angegebenen Objektebene.</summary>
            <param name="layer">Gibt die Objektebene an für die das Feature berechnet wird.</param>
            <param name="processor">Bietet Zugriff auf die Bilddaten.</param>
        </member>
        <member name="M:SharpAccessory.Imaging.Classification.Features.Color.StdDevIntensity.ProcessLayer(SharpAccessory.Imaging.Segmentation.ObjectLayer,SharpAccessory.Imaging.Processors.GrayscaleProcessor)">
            <summary>Berechnet dieses Feature für alle Objekte der angegebenen Objektebene.</summary>
            <param name="layer">Gibt die Objektebene an für die das Feature berechnet wird.</param>
            <param name="processor">Bietet Zugriff auf die Bilddaten.</param>
        </member>
        <member name="M:SharpAccessory.Imaging.Classification.Features.Color.StdDevIntensity.GetValue(SharpAccessory.Imaging.Segmentation.ImageObject,SharpAccessory.Imaging.Processors.BitmapProcessor)">
            <summary>Berechnet den Wert des Features für das angegebene Objekt.</summary>
            <param name="imageObject">Gibt das Objekt an für das das Feature berechnet wird.</param>
            <param name="processor">Bietet Zugriff auf die Bilddaten.</param>
        </member>
        <member name="M:SharpAccessory.Imaging.Classification.Features.Color.StdDevIntensity.GetValue(SharpAccessory.Imaging.Segmentation.ImageObject,SharpAccessory.Imaging.Processors.GrayscaleProcessor)">
            <summary>Berechnet den Wert des Features für das angegebene Objekt.</summary>
            <param name="imageObject">Gibt das Objekt an für das das Feature berechnet wird.</param>
            <param name="processor">Bietet Zugriff auf die Bilddaten.</param>
        </member>
        <member name="T:SharpAccessory.Imaging.Classification.Features.Color.StdDevIntensityOnContour">
            <summary>Berechnet die Standardabweichung der Intensität auf Objektkonturen.</summary>
        </member>
        <member name="M:SharpAccessory.Imaging.Classification.Features.Color.StdDevIntensityOnContour.#ctor(System.Double)">
            <summary>Erstellt und initialisiert eine neue Instanz.</summary>
            <param name="value">Gibt den Wert des Features an.</param>
        </member>
        <member name="M:SharpAccessory.Imaging.Classification.Features.Color.StdDevIntensityOnContour.ProcessLayer(SharpAccessory.Imaging.Segmentation.ObjectLayer,SharpAccessory.Imaging.Processors.BitmapProcessor)">
            <summary>Berechnet dieses Feature für alle Objekte der angegebenen Objektebene.</summary>
            <param name="layer">Gibt die Objektebene an für die das Feature berechnet wird.</param>
            <param name="processor">Bietet Zugriff auf die Bilddaten.</param>
        </member>
        <member name="M:SharpAccessory.Imaging.Classification.Features.Color.StdDevIntensityOnContour.ProcessLayer(SharpAccessory.Imaging.Segmentation.ObjectLayer,SharpAccessory.Imaging.Processors.GrayscaleProcessor)">
            <summary>Berechnet dieses Feature für alle Objekte der angegebenen Objektebene.</summary>
            <param name="layer">Gibt die Objektebene an für die das Feature berechnet wird.</param>
            <param name="processor">Bietet Zugriff auf die Bilddaten.</param>
        </member>
        <member name="M:SharpAccessory.Imaging.Classification.Features.Color.StdDevIntensityOnContour.GetValue(SharpAccessory.Imaging.Segmentation.Contour,SharpAccessory.Imaging.Processors.BitmapProcessor)">
            <summary>Berechnet den Wert des Features für die angegebene Kontur.</summary>
            <param name="contour">Gibt die Kontur des Objekts an für das das Feature berechnet wird.</param>
            <param name="processor">Bietet Zugriff auf die Bilddaten.</param>
        </member>
        <member name="M:SharpAccessory.Imaging.Classification.Features.Color.StdDevIntensityOnContour.GetValue(SharpAccessory.Imaging.Segmentation.Contour,SharpAccessory.Imaging.Processors.GrayscaleProcessor)">
            <summary>Berechnet den Wert des Features für die angegebene Kontur.</summary>
            <param name="contour">Gibt die Kontur des Objekts an für das das Feature berechnet wird.</param>
            <param name="processor">Bietet Zugriff auf die Bilddaten.</param>
        </member>
        <member name="T:SharpAccessory.Imaging.Classification.Features.Gradient.ContourGradient">
            <summary>Berechnet den Intensitäts-Unterschied zwischen einer Kontur und ihrer Umgebung.</summary>
        </member>
        <member name="M:SharpAccessory.Imaging.Classification.Features.Gradient.ContourGradient.#ctor(System.Double)">
            <summary>Erzeugt ein neues Feature unter Verwendung der angegebenen Werte.</summary>
            <param name="value">Gibt den Wert des Features an.</param>
        </member>
        <member name="M:SharpAccessory.Imaging.Classification.Features.Gradient.ContourGradient.ProcessLayer(SharpAccessory.Imaging.Segmentation.ObjectLayer,SharpAccessory.Imaging.Processors.BitmapProcessor)">
            <summary>Berechnet dieses Feature für alle Objekte der angegebenen Objektebene.</summary>
            <param name="layer">Gibt die Objektebene an für die das Feature berechnet wird.</param>
            <param name="processor">Bietet Zugriff auf die Bilddaten.</param>
        </member>
        <member name="M:SharpAccessory.Imaging.Classification.Features.Gradient.ContourGradient.ProcessLayer(SharpAccessory.Imaging.Segmentation.ObjectLayer,SharpAccessory.Imaging.Processors.GrayscaleProcessor)">
            <summary>Berechnet dieses Feature für alle Objekte der angegebenen Objektebene.</summary>
            <param name="layer">Gibt die Objektebene an für die das Feature berechnet wird.</param>
            <param name="processor">Bietet Zugriff auf die Bilddaten.</param>
        </member>
        <member name="M:SharpAccessory.Imaging.Classification.Features.Gradient.ContourGradient.GetValue(SharpAccessory.Imaging.Segmentation.Contour,SharpAccessory.Imaging.Processors.BitmapProcessor)">
            <summary>Berechnet den Wert des Features für die angegebene Kontur.</summary>
            <param name="contour">Gibt die Kontur des Objekts an für das das Feature berechnet wird.</param>
            <param name="processor">Bietet Zugriff auf die Bilddaten.</param>
        </member>
        <member name="M:SharpAccessory.Imaging.Classification.Features.Gradient.ContourGradient.GetValue(SharpAccessory.Imaging.Segmentation.Contour,SharpAccessory.Imaging.Processors.GrayscaleProcessor)">
            <summary>Berechnet den Wert des Features für die angegebene Kontur.</summary>
            <param name="contour">Gibt die Kontur des Objekts an für das das Feature berechnet wird.</param>
            <param name="processor">Bietet Zugriff auf die Bilddaten.</param>
        </member>
        <member name="T:SharpAccessory.Imaging.Classification.Features.Gradient.ContourValue">
            <summary>Berechnet den Wert einer Kontur. Original Paper: Wienert, S. et al. Detection and 
            Segmentation of Cell Nuclei in Virtual Microscopy Images: A Minimum-Model Approach. Sci. Rep. 2, 503; 
            DOI:10.1038/srep00503 (2012).</summary>
        </member>
        <member name="M:SharpAccessory.Imaging.Classification.Features.Gradient.ContourValue.#ctor(System.Double)">
            <summary>Erstellt und initialisiert eine neue Instanz.</summary>
            <param name="value">Gibt den Wert des Features an.</param>
        </member>
        <member name="M:SharpAccessory.Imaging.Classification.Features.Gradient.ContourValue.ProcessLayer(SharpAccessory.Imaging.Segmentation.ObjectLayer,SharpAccessory.Imaging.Processors.GrayscaleProcessor)">
            <summary>Berechnet dieses Feature für alle Objekte der angegebenen Objektebene.</summary>
            <param name="layer">Gibt die Objektebene an für die das Feature berechnet wird.</param>
            <param name="gradientImage">Bietet Zugriff auf die Bilddaten des Gradientenbildes.</param>
        </member>
        <member name="M:SharpAccessory.Imaging.Classification.Features.Gradient.ContourValue.GetValue(SharpAccessory.Imaging.Segmentation.Contour,SharpAccessory.Imaging.Processors.GrayscaleProcessor)">
            <summary>Berechnet den Wert des Features für die angegebene Kontur.</summary>
            <param name="contour">Gibt die Kontur des Objekts an für das das Feature berechnet wird.</param>
            <param name="gradientImage">Bietet Zugriff auf die Bilddaten des Gradientenbildes.</param>
        </member>
        <member name="T:SharpAccessory.Imaging.Classification.Features.Gradient.GradientFit">
            <summary>Berechnet die relative Anzahl aller Konturpunkte deren Gradient in einer 3x3 Nachbarschaft 
            maximal ist. Original Paper: Wienert, S. et al. Detection and Segmentation of Cell Nuclei in Virtual 
            Microscopy Images: A Minimum-Model Approach. Sci. Rep. 2, 503; DOI:10.1038/srep00503 (2012).</summary>
        </member>
        <member name="M:SharpAccessory.Imaging.Classification.Features.Gradient.GradientFit.#ctor(System.Double)">
            <summary>Erstellt und initialisiert eine neue Instanz.</summary>
            <param name="value">Gibt den Wert des Features an.</param>
        </member>
        <member name="M:SharpAccessory.Imaging.Classification.Features.Gradient.GradientFit.ProcessLayer(SharpAccessory.Imaging.Segmentation.ObjectLayer,SharpAccessory.Imaging.Processors.GrayscaleProcessor)">
            <summary>Berechnet dieses Feature für alle Objekte der angegebenen Objektebene.</summary>
            <param name="layer">Gibt die Objektebene an für die das Feature berechnet wird.</param>
            <param name="gradientImage">Bietet Zugriff auf die Bilddaten des Gradientenbildes.</param>
        </member>
        <member name="M:SharpAccessory.Imaging.Classification.Features.Gradient.GradientFit.GetValue(SharpAccessory.Imaging.Segmentation.Contour,SharpAccessory.Imaging.Processors.GrayscaleProcessor)">
            <summary>Berechnet den Wert des Features für die angegebene Kontur.</summary>
            <param name="contour">Gibt die Kontur des Objekts an für das das Feature berechnet wird.</param>
            <param name="gradientImage">Bietet Zugriff auf die Bilddaten des Gradientenbildes.</param>
        </member>
        <member name="T:SharpAccessory.Imaging.Classification.Features.Localization.AngleOfCorrespondingEllipse">
            <summary>Repräsentiert den Winkel der beschreibenden Ellipse. Original Paper: Hufnagl P, Schlosser A, 
            Voss K. Merkmale der Form, Größe und Lage digitaler Objekte. Bild und Ton. 1984:37, 293-298.</summary>
        </member>
        <member name="M:SharpAccessory.Imaging.Classification.Features.Localization.AngleOfCorrespondingEllipse.#ctor(System.Double)">
            <summary>Erstellt und initialisiert eine neue Instanz.</summary>
            <param name="value">Gibt den Wert des Features an.</param>
        </member>
        <member name="M:SharpAccessory.Imaging.Classification.Features.Localization.AngleOfCorrespondingEllipse.#ctor(SharpAccessory.Imaging.Segmentation.CorrespondingEllipse)">
            <summary>Erstellt und initialisiert eine neue Instanz.</summary>
            <param name="e">Gibt den Wert des Features an.</param>
        </member>
        <member name="T:SharpAccessory.Imaging.Classification.Features.Localization.AngleOfEccentricity">
            <summary>Repräsentiert den Winkel der Exzentrizität.</summary>
        </member>
        <member name="M:SharpAccessory.Imaging.Classification.Features.Localization.AngleOfEccentricity.#ctor(System.Double)">
            <summary>Erstellt und initialisiert eine neue Instanz.</summary>
            <param name="value">Gibt den Wert des Features an.</param>
        </member>
        <member name="M:SharpAccessory.Imaging.Classification.Features.Localization.AngleOfEccentricity.#ctor(SharpAccessory.Imaging.Segmentation.Eccentricity)">
            <summary>Erstellt und initialisiert eine neue Instanz.</summary>
            <param name="e">Gibt den Wert des Features an.</param>
        </member>
        <member name="T:SharpAccessory.Imaging.Classification.Features.Localization.BorderTo">
            <summary>Berechnet die Kontaktlänge zu Objekten einer bestimmten Klasse.</summary>
        </member>
        <member name="M:SharpAccessory.Imaging.Classification.Features.Localization.BorderTo.#ctor(SharpAccessory.Imaging.Classification.Class,System.Double)">
            <summary>Erstellt und initialisiert eine neue Instanz.</summary>
            <param name="cls">Gibt die Klasse an mit der dieses Feature berechnet wurde.</param>
            <param name="value">Gibt den Wert des Features an.</param>
        </member>
        <member name="M:SharpAccessory.Imaging.Classification.Features.Localization.BorderTo.ProcessLayer(SharpAccessory.Imaging.Classification.Class,SharpAccessory.Imaging.Segmentation.ObjectLayer)">
            <summary>Berechnet dieses Feature für alle Objekte der angegebenen Objektebene.</summary>
            <param name="cls">Gibt die Klasse an mit der das Feature berechnet wird.</param>
            <param name="layer">Gibt die Objektebene an für die das Feature berechnet wird.</param>
        </member>
        <member name="M:SharpAccessory.Imaging.Classification.Features.Localization.BorderTo.GetValue(SharpAccessory.Imaging.Classification.Class,SharpAccessory.Imaging.Segmentation.ImageObject)">
            <summary>Berechnet den Wert des Features für das angegebene Objekt.</summary>
            <param name="cls">Gibt die Klasse an mit der das Feature berechnet wird.</param>
            <param name="imageObject">Gibt das Objekt an für das das Feature berechnet wird.</param>
        </member>
        <member name="P:SharpAccessory.Imaging.Classification.Features.Localization.BorderTo.Class">
            <summary>Ruft die Klasse ab mit der dieses Feature berechnet wurde.</summary>
        </member>
        <member name="T:SharpAccessory.Imaging.Classification.Features.Localization.DiameterOfEccentricity">
            <summary>Repräsentiert den Durchmesser der Exzentrizität.</summary>
        </member>
        <member name="M:SharpAccessory.Imaging.Classification.Features.Localization.DiameterOfEccentricity.#ctor(System.Double)">
            <summary>Erstellt und initialisiert eine neue Instanz.</summary>
            <param name="value">Gibt den Wert des Features an.</param>
        </member>
        <member name="M:SharpAccessory.Imaging.Classification.Features.Localization.DiameterOfEccentricity.#ctor(SharpAccessory.Imaging.Segmentation.Eccentricity)">
            <summary>Erstellt und initialisiert eine neue Instanz.</summary>
            <param name="e">Gibt den Wert des Features an.</param>
        </member>
        <member name="T:SharpAccessory.Imaging.Classification.Features.Localization.LargeGapOfEccentricity">
            <summary>Repräsentiert den größeren Abstand der Exzentrizität.</summary>
        </member>
        <member name="M:SharpAccessory.Imaging.Classification.Features.Localization.LargeGapOfEccentricity.#ctor(System.Double)">
            <summary>Erstellt und initialisiert eine neue Instanz.</summary>
            <param name="value">Gibt den Wert des Features an.</param>
        </member>
        <member name="M:SharpAccessory.Imaging.Classification.Features.Localization.LargeGapOfEccentricity.#ctor(SharpAccessory.Imaging.Segmentation.Eccentricity)">
            <summary>Erstellt und initialisiert eine neue Instanz.</summary>
            <param name="e">Gibt den Wert des Features an.</param>
        </member>
        <member name="T:SharpAccessory.Imaging.Classification.Features.Localization.NumberOfNeighbouring">
            <summary>Berechnet die Anzahl der benachbarten Objekte einer bestimmten Klasse.</summary>
        </member>
        <member name="M:SharpAccessory.Imaging.Classification.Features.Localization.NumberOfNeighbouring.#ctor(SharpAccessory.Imaging.Classification.Class,System.Double)">
            <summary>Erstellt und initialisiert eine neue Instanz.</summary>
            <param name="cls">Gibt die Klasse an mit der dieses Feature berechnet wurde.</param>
            <param name="value">Gibt den Wert des Features an.</param>
        </member>
        <member name="M:SharpAccessory.Imaging.Classification.Features.Localization.NumberOfNeighbouring.ProcessLayer(SharpAccessory.Imaging.Classification.Class,SharpAccessory.Imaging.Segmentation.ObjectLayer)">
            <summary>Berechnet dieses Feature für alle Objekte der angegebenen Objektebene.</summary>
            <param name="cls">Gibt die Klasse an mit der das Feature berechnet wird.</param>
            <param name="layer">Gibt die Objektebene an für die das Feature berechnet wird.</param>
        </member>
        <member name="M:SharpAccessory.Imaging.Classification.Features.Localization.NumberOfNeighbouring.ProcessLayer(SharpAccessory.Imaging.Classification.Class,SharpAccessory.Imaging.Networking.ObjectNetwork)">
            <summary>Berechnet dieses Feature für alle Objekte der angegebenen Objektebene.</summary>
            <param name="cls">Gibt die Klasse an mit der das Feature berechnet wird.</param>
            <param name="network">Enthält die Objekte und deren Nachbarschaftsbeziehungen.</param>
        </member>
        <member name="M:SharpAccessory.Imaging.Classification.Features.Localization.NumberOfNeighbouring.GetValue(SharpAccessory.Imaging.Classification.Class,SharpAccessory.Imaging.Networking.ObjectNeighbourhood)">
            <summary>Berechnet den Wert des Features für das angegebene Objekt.</summary>
            <param name="cls">Gibt die Klasse an mit der das Feature berechnet wird.</param>
            <param name="neighbourhood">Gibt die Nachbarschaft an für die das Feature berechnet wird.</param>
        </member>
        <member name="P:SharpAccessory.Imaging.Classification.Features.Localization.NumberOfNeighbouring.Class">
            <summary>Ruft die Klasse ab mit der dieses Feature berechnet wurde.</summary>
        </member>
        <member name="T:SharpAccessory.Imaging.Classification.Features.Localization.NumberOfTouching">
            <summary>Berechnet die Anzahl der angrenzenden Objekte einer bestimmten Klasse.</summary>
        </member>
        <member name="M:SharpAccessory.Imaging.Classification.Features.Localization.NumberOfTouching.#ctor(SharpAccessory.Imaging.Classification.Class,System.Double)">
            <summary>Erstellt und initialisiert eine neue Instanz.</summary>
            <param name="cls">Gibt die Klasse an mit der dieses Feature berechnet wurde.</param>
            <param name="value">Gibt den Wert des Features an.</param>
        </member>
        <member name="M:SharpAccessory.Imaging.Classification.Features.Localization.NumberOfTouching.ProcessLayer(SharpAccessory.Imaging.Classification.Class,SharpAccessory.Imaging.Segmentation.ObjectLayer)">
            <summary>Berechnet dieses Feature für alle Objekte der angegebenen Objektebene.</summary>
            <param name="cls">Gibt die Klasse an mit der das Feature berechnet wird.</param>
            <param name="layer">Gibt die Objektebene an für die das Feature berechnet wird.</param>
        </member>
        <member name="M:SharpAccessory.Imaging.Classification.Features.Localization.NumberOfTouching.ProcessLayer(SharpAccessory.Imaging.Classification.Class,SharpAccessory.Imaging.Networking.ObjectNetwork)">
            <summary>Berechnet dieses Feature für alle Objekte der angegebenen Objektebene.</summary>
            <param name="cls">Gibt die Klasse an mit der das Feature berechnet wird.</param>
            <param name="network">Enthält die Objekte und deren Nachbarschaftsbeziehungen.</param>
        </member>
        <member name="M:SharpAccessory.Imaging.Classification.Features.Localization.NumberOfTouching.GetValue(SharpAccessory.Imaging.Classification.Class,SharpAccessory.Imaging.Networking.ObjectNeighbourhood)">
            <summary>Berechnet den Wert des Features für das angegebene Objekt.</summary>
            <param name="cls">Gibt die Klasse an mit der das Feature berechnet wird.</param>
            <param name="neighbourhood">Gibt die Nachbarschaft an für die das Feature berechnet wird.</param>
        </member>
        <member name="P:SharpAccessory.Imaging.Classification.Features.Localization.NumberOfTouching.Class">
            <summary>Ruft die Klasse ab mit der dieses Feature berechnet wurde.</summary>
        </member>
        <member name="T:SharpAccessory.Imaging.Classification.Features.Localization.PixelsAtLayerBorder">
            <summary>Berechnet die Anzahl der Konturpixel die am Rand der Objektebene liegen.</summary>
        </member>
        <member name="M:SharpAccessory.Imaging.Classification.Features.Localization.PixelsAtLayerBorder.#ctor(System.Double)">
            <summary>Erstellt und initialisiert eine neue Instanz.</summary>
            <param name="value">Gibt den Wert des Features an.</param>
        </member>
        <member name="M:SharpAccessory.Imaging.Classification.Features.Localization.PixelsAtLayerBorder.ProcessLayer(SharpAccessory.Imaging.Segmentation.ObjectLayer)">
            <summary>Berechnet dieses Feature für alle Objekte der angegebenen Objektebene.</summary>
            <param name="layer">Gibt die Objektebene an für die das Feature berechnet wird.</param>
        </member>
        <member name="M:SharpAccessory.Imaging.Classification.Features.Localization.PixelsAtLayerBorder.GetValue(SharpAccessory.Imaging.Segmentation.Contour,System.Int32,System.Int32)">
            <summary>Berechnet den Wert des Features für die angegebene Kontur.</summary>
            <param name="contour">Gibt die Kontur des Objekts an für das das Feature berechnet wird.</param>
            <param name="width">Gibt die Breite des Bildes an.</param>
            <param name="height">Gibt die Höhe des Bildes an.</param>
        </member>
        <member name="T:SharpAccessory.Imaging.Classification.Features.Localization.RatioOfNeighbouring">
            <summary>Berechnet den Anteil der benachbarten Objekte einer bestimmten Klasse.</summary>
        </member>
        <member name="M:SharpAccessory.Imaging.Classification.Features.Localization.RatioOfNeighbouring.#ctor(SharpAccessory.Imaging.Classification.Class,System.Double)">
            <summary>Erstellt und initialisiert eine neue Instanz.</summary>
            <param name="cls">Gibt die Klasse an mit der dieses Feature berechnet wurde.</param>
            <param name="value">Gibt den Wert des Features an.</param>
        </member>
        <member name="M:SharpAccessory.Imaging.Classification.Features.Localization.RatioOfNeighbouring.ProcessLayer(SharpAccessory.Imaging.Classification.Class,SharpAccessory.Imaging.Segmentation.ObjectLayer)">
            <summary>Berechnet dieses Feature für alle Objekte der angegebenen Objektebene.</summary>
            <param name="cls">Gibt die Klasse an mit der das Feature berechnet wird.</param>
            <param name="layer">Gibt die Objektebene an für die das Feature berechnet wird.</param>
        </member>
        <member name="M:SharpAccessory.Imaging.Classification.Features.Localization.RatioOfNeighbouring.ProcessLayer(SharpAccessory.Imaging.Classification.Class,SharpAccessory.Imaging.Networking.ObjectNetwork)">
            <summary>Berechnet dieses Feature für alle Objekte der angegebenen Objektebene.</summary>
            <param name="cls">Gibt die Klasse an mit der das Feature berechnet wird.</param>
            <param name="network">Enthält die Objekte und deren Nachbarschaftsbeziehungen.</param>
        </member>
        <member name="M:SharpAccessory.Imaging.Classification.Features.Localization.RatioOfNeighbouring.GetValue(SharpAccessory.Imaging.Classification.Class,SharpAccessory.Imaging.Networking.ObjectNeighbourhood)">
            <summary>Berechnet den Wert des Features für das angegebene Objekt.</summary>
            <param name="cls">Gibt die Klasse an mit der das Feature berechnet wird.</param>
            <param name="neighbourhood">Gibt die Nachbarschaft an für die das Feature berechnet wird.</param>
        </member>
        <member name="P:SharpAccessory.Imaging.Classification.Features.Localization.RatioOfNeighbouring.Class">
            <summary>Ruft die Klasse ab mit der dieses Feature berechnet wurde.</summary>
        </member>
        <member name="T:SharpAccessory.Imaging.Classification.Features.Localization.RatioOfTouching">
            <summary>Berechnet den Anteil der angrenzenden Objekte einer bestimmten Klasse.</summary>
        </member>
        <member name="M:SharpAccessory.Imaging.Classification.Features.Localization.RatioOfTouching.#ctor(SharpAccessory.Imaging.Classification.Class,System.Double)">
            <summary>Erstellt und initialisiert eine neue Instanz.</summary>
            <param name="cls">Gibt die Klasse an mit der dieses Feature berechnet wurde.</param>
            <param name="value">Gibt den Wert des Features an.</param>
        </member>
        <member name="M:SharpAccessory.Imaging.Classification.Features.Localization.RatioOfTouching.ProcessLayer(SharpAccessory.Imaging.Classification.Class,SharpAccessory.Imaging.Segmentation.ObjectLayer)">
            <summary>Berechnet dieses Feature für alle Objekte der angegebenen Objektebene.</summary>
            <param name="cls">Gibt die Klasse an mit der das Feature berechnet wird.</param>
            <param name="layer">Gibt die Objektebene an für die das Feature berechnet wird.</param>
        </member>
        <member name="M:SharpAccessory.Imaging.Classification.Features.Localization.RatioOfTouching.ProcessLayer(SharpAccessory.Imaging.Classification.Class,SharpAccessory.Imaging.Networking.ObjectNetwork)">
            <summary>Berechnet dieses Feature für alle Objekte der angegebenen Objektebene.</summary>
            <param name="cls">Gibt die Klasse an mit der das Feature berechnet wird.</param>
            <param name="network">Enthält die Objekte und deren Nachbarschaftsbeziehungen.</param>
        </member>
        <member name="M:SharpAccessory.Imaging.Classification.Features.Localization.RatioOfTouching.GetValue(SharpAccessory.Imaging.Classification.Class,SharpAccessory.Imaging.Networking.ObjectNeighbourhood)">
            <summary>Berechnet den Wert des Features für das angegebene Objekt.</summary>
            <param name="cls">Gibt die Klasse an mit der das Feature berechnet wird.</param>
            <param name="neighbourhood">Gibt die Nachbarschaft an für die das Feature berechnet wird.</param>
        </member>
        <member name="P:SharpAccessory.Imaging.Classification.Features.Localization.RatioOfTouching.Class">
            <summary>Ruft die Klasse ab mit der dieses Feature berechnet wurde.</summary>
        </member>
        <member name="T:SharpAccessory.Imaging.Classification.Features.Localization.RelativeBorderTo">
            <summary>Berechnet die relative Kontaktlänge zu Objekten einer bestimmten Klasse.</summary>
        </member>
        <member name="M:SharpAccessory.Imaging.Classification.Features.Localization.RelativeBorderTo.#ctor(SharpAccessory.Imaging.Classification.Class,System.Double)">
            <summary>Erstellt und initialisiert eine neue Instanz.</summary>
            <param name="cls">Gibt die Klasse an mit der dieses Feature berechnet wurde.</param>
            <param name="value">Gibt den Wert des Features an.</param>
        </member>
        <member name="M:SharpAccessory.Imaging.Classification.Features.Localization.RelativeBorderTo.ProcessLayer(SharpAccessory.Imaging.Classification.Class,SharpAccessory.Imaging.Segmentation.ObjectLayer)">
            <summary>Berechnet dieses Feature für alle Objekte der angegebenen Objektebene.</summary>
            <param name="cls">Gibt die Klasse an mit der das Feature berechnet wird.</param>
            <param name="layer">Gibt die Objektebene an für die das Feature berechnet wird.</param>
        </member>
        <member name="M:SharpAccessory.Imaging.Classification.Features.Localization.RelativeBorderTo.GetValue(SharpAccessory.Imaging.Classification.Class,SharpAccessory.Imaging.Segmentation.ImageObject)">
            <summary>Berechnet den Wert des Features für das angegebene Objekt.</summary>
            <param name="cls">Gibt die Klasse an mit der das Feature berechnet wird.</param>
            <param name="imageObject">Gibt das Objekt an für das das Feature berechnet wird.</param>
        </member>
        <member name="P:SharpAccessory.Imaging.Classification.Features.Localization.RelativeBorderTo.Class">
            <summary>Ruft die Klasse ab mit der dieses Feature berechnet wurde.</summary>
        </member>
        <member name="T:SharpAccessory.Imaging.Classification.Features.Localization.MinimumDistanceToTesselationBorder">
            <summary>Bestimmt die kleinste auftretende Distanz vom Objektrand zum Rand der Tesselation.</summary>
        </member>
        <member name="M:SharpAccessory.Imaging.Classification.Features.Localization.MinimumDistanceToTesselationBorder.#ctor(System.Double)">
            <summary>Erstellt und initialisiert eine neue Instanz.</summary>
            <param name="value">Gibt den Wert des Features an.</param>
        </member>
        <member name="M:SharpAccessory.Imaging.Classification.Features.Localization.MinimumDistanceToTesselationBorder.ProcessLayer(SharpAccessory.Imaging.Segmentation.ObjectLayer)">
            <summary>Berechnet dieses Feature für alle Objekte der angegebenen Objektebene.</summary>
            <param name="layer">Gibt die Objektebene an für die das Feature berechnet wird.</param>
        </member>
        <member name="M:SharpAccessory.Imaging.Classification.Features.Localization.MinimumDistanceToTesselationBorder.ProcessLayer(SharpAccessory.Imaging.Segmentation.ObjectLayer,System.Double[0:,0:])">
            <summary>Berechnet dieses Feature für alle Objekte der angegebenen Objektebene.</summary>
            <param name="layer">Gibt die Objektebene an für die das Feature berechnet wird.</param>
            <param name="distanceMapOfTesselation">Enthält die Distanzdaten der Tesselation.</param>
        </member>
        <member name="M:SharpAccessory.Imaging.Classification.Features.Localization.MinimumDistanceToTesselationBorder.GetValue(SharpAccessory.Imaging.Segmentation.Contour,System.Double[0:,0:])">
            <summary>Berechnet den Wert des Features für das angegebene Objekt.</summary>
            <param name="contour">Gibt die Kontur des Objekts an für das das Feature berechnet wird.</param>
            <param name="distanceMapOfTesselation">Enthält die Distanzdaten der Tesselation.</param>
        </member>
        <member name="T:SharpAccessory.Imaging.Classification.Features.Localization.SignificanceOfEccentricity">
            <summary>Repräsentiert die Signifikanz der Exzentrizität.</summary>
        </member>
        <member name="M:SharpAccessory.Imaging.Classification.Features.Localization.SignificanceOfEccentricity.#ctor(System.Double)">
            <summary>Erstellt und initialisiert eine neue Instanz.</summary>
            <param name="value">Gibt den Wert des Features an.</param>
        </member>
        <member name="M:SharpAccessory.Imaging.Classification.Features.Localization.SignificanceOfEccentricity.#ctor(SharpAccessory.Imaging.Segmentation.Eccentricity)">
            <summary>Erstellt und initialisiert eine neue Instanz.</summary>
            <param name="e">Gibt den Wert des Features an.</param>
        </member>
        <member name="T:SharpAccessory.Imaging.Classification.Features.Localization.SmallGapOfEccentricity">
            <summary>Repräsentiert den kleineren Abstand der Exzentrizität.</summary>
        </member>
        <member name="M:SharpAccessory.Imaging.Classification.Features.Localization.SmallGapOfEccentricity.#ctor(System.Double)">
            <summary>Erstellt und initialisiert eine neue Instanz.</summary>
            <param name="value">Gibt den Wert des Features an.</param>
        </member>
        <member name="M:SharpAccessory.Imaging.Classification.Features.Localization.SmallGapOfEccentricity.#ctor(SharpAccessory.Imaging.Segmentation.Eccentricity)">
            <summary>Erstellt und initialisiert eine neue Instanz.</summary>
            <param name="e">Gibt den Wert des Features an.</param>
        </member>
        <member name="T:SharpAccessory.Imaging.Classification.Features.Shape.AspectRatioOfCorrespondingEllipse">
            <summary>Repräsentiert das Durchmesserverhältnis der beschreibenden Ellipse. Original Paper: Hufnagl 
            P, Schlosser A, Voss K. Merkmale der Form, Größe und Lage digitaler Objekte. Bild und Ton. 1984:37, 
            293-298.</summary>
        </member>
        <member name="M:SharpAccessory.Imaging.Classification.Features.Shape.AspectRatioOfCorrespondingEllipse.#ctor(System.Double)">
            <summary>Erstellt und initialisiert eine neue Instanz.</summary>
            <param name="value">Gibt den Wert des Features an.</param>
        </member>
        <member name="M:SharpAccessory.Imaging.Classification.Features.Shape.AspectRatioOfCorrespondingEllipse.#ctor(SharpAccessory.Imaging.Segmentation.CorrespondingEllipse)">
            <summary>Erstellt und initialisiert eine neue Instanz.</summary>
            <param name="e">Gibt den Wert des Features an.</param>
        </member>
        <member name="T:SharpAccessory.Imaging.Classification.Features.Shape.ConvexityOfContour">
            <summary>Repräsentiert das Semikonvexitätsmaß einer Kontur. Original Paper: Hufnagl P, Schlosser A, 
            Voss K. Merkmale der Form, Größe und Lage digitaler Objekte. Bild und Ton. 1984:37, 293-298.</summary>
        </member>
        <member name="M:SharpAccessory.Imaging.Classification.Features.Shape.ConvexityOfContour.#ctor(System.Double)">
            <summary>Erstellt und initialisiert eine neue Instanz.</summary>
            <param name="value">Gibt den Wert des Features an.</param>
        </member>
        <member name="M:SharpAccessory.Imaging.Classification.Features.Shape.ConvexityOfContour.#ctor(SharpAccessory.Imaging.Segmentation.ContourProperties)">
            <summary>Erstellt und initialisiert eine neue Instanz.</summary>
            <param name="p">Gibt den Wert des Features an.</param>
        </member>
        <member name="T:SharpAccessory.Imaging.Classification.Features.Shape.FormFactorOfContour">
            <summary>Repräsentiert den Form-Faktor einer Kontur. Original Paper: Hufnagl P, Schlosser A, Voss K. 
            Merkmale der Form, Größe und Lage digitaler Objekte. Bild und Ton. 1984:37, 293-298.</summary>
        </member>
        <member name="M:SharpAccessory.Imaging.Classification.Features.Shape.FormFactorOfContour.#ctor(System.Double)">
            <summary>Erstellt und initialisiert eine neue Instanz.</summary>
            <param name="value">Gibt den Wert des Features an.</param>
        </member>
        <member name="M:SharpAccessory.Imaging.Classification.Features.Shape.FormFactorOfContour.#ctor(SharpAccessory.Imaging.Segmentation.ContourProperties)">
            <summary>Erstellt und initialisiert eine neue Instanz.</summary>
            <param name="p">Gibt den Wert des Features an.</param>
        </member>
        <member name="T:SharpAccessory.Imaging.Classification.Features.Shape.FormFactorOfConvexHull">
            <summary>Repräsentiert den Form-Faktor eines konvexen Hüll-Polygons.</summary>
        </member>
        <member name="M:SharpAccessory.Imaging.Classification.Features.Shape.FormFactorOfConvexHull.#ctor(System.Double)">
            <summary>Erstellt und initialisiert eine neue Instanz.</summary>
            <param name="value">Gibt den Wert des Features an.</param>
        </member>
        <member name="M:SharpAccessory.Imaging.Classification.Features.Shape.FormFactorOfConvexHull.#ctor(SharpAccessory.Imaging.Segmentation.ConvexHullProperties)">
            <summary>Erstellt und initialisiert eine neue Instanz.</summary>
            <param name="p">Gibt den Wert des Features an.</param>
        </member>
        <member name="T:SharpAccessory.Imaging.Classification.Features.Size.AreaOfContour">
            <summary>Repräsentiert die geometrische Fläche einer Kontur. Original Paper: Hufnagl P, Schlosser A, 
            Voss K. Merkmale der Form, Größe und Lage digitaler Objekte. Bild und Ton. 1984:37, 293-298.</summary>
        </member>
        <member name="M:SharpAccessory.Imaging.Classification.Features.Size.AreaOfContour.#ctor(System.Double)">
            <summary>Erstellt und initialisiert eine neue Instanz.</summary>
            <param name="value">Gibt den Wert des Features an.</param>
        </member>
        <member name="M:SharpAccessory.Imaging.Classification.Features.Size.AreaOfContour.#ctor(SharpAccessory.Imaging.Segmentation.ContourProperties)">
            <summary>Erstellt und initialisiert eine neue Instanz.</summary>
            <param name="p">Gibt den Wert des Features an.</param>
        </member>
        <member name="T:SharpAccessory.Imaging.Classification.Features.Size.AreaOfConvexHull">
            <summary>Repräsentiert den Flächeninhalt eines konvexen Hüll-Polygons.</summary>
        </member>
        <member name="M:SharpAccessory.Imaging.Classification.Features.Size.AreaOfConvexHull.#ctor(System.Double)">
            <summary>Erstellt und initialisiert eine neue Instanz.</summary>
            <param name="value">Gibt den Wert des Features an.</param>
        </member>
        <member name="M:SharpAccessory.Imaging.Classification.Features.Size.AreaOfConvexHull.#ctor(SharpAccessory.Imaging.Segmentation.ConvexHullProperties)">
            <summary>Erstellt und initialisiert eine neue Instanz.</summary>
            <param name="p">Gibt den Wert des Features an.</param>
        </member>
        <member name="T:SharpAccessory.Imaging.Classification.Features.Size.LengthOfContour">
            <summary>Repräsentiert die geometrische Länge einer Kontur. Original Paper: Hufnagl P, Schlosser A, 
            Voss K. Merkmale der Form, Größe und Lage digitaler Objekte. Bild und Ton. 1984:37, 293-298.</summary>
        </member>
        <member name="M:SharpAccessory.Imaging.Classification.Features.Size.LengthOfContour.#ctor(System.Double)">
            <summary>Erstellt und initialisiert eine neue Instanz.</summary>
            <param name="value">Gibt den Wert des Features an.</param>
        </member>
        <member name="M:SharpAccessory.Imaging.Classification.Features.Size.LengthOfContour.#ctor(SharpAccessory.Imaging.Segmentation.ContourProperties)">
            <summary>Erstellt und initialisiert eine neue Instanz.</summary>
            <param name="p">Gibt den Wert des Features an.</param>
        </member>
        <member name="T:SharpAccessory.Imaging.Classification.Features.Size.LengthOfConvexHull">
            <summary>Repräsentiert den Umfang eines konvexen Hüll-Polygons.</summary>
        </member>
        <member name="M:SharpAccessory.Imaging.Classification.Features.Size.LengthOfConvexHull.#ctor(System.Double)">
            <summary>Erstellt und initialisiert eine neue Instanz.</summary>
            <param name="value">Gibt den Wert des Features an.</param>
        </member>
        <member name="M:SharpAccessory.Imaging.Classification.Features.Size.LengthOfConvexHull.#ctor(SharpAccessory.Imaging.Segmentation.ConvexHullProperties)">
            <summary>Erstellt und initialisiert eine neue Instanz.</summary>
            <param name="p">Gibt den Wert des Features an.</param>
        </member>
        <member name="T:SharpAccessory.Imaging.Classification.Features.Size.MajorAxisOfCorrespondingEllipse">
            <summary>Repräsentiert die Länge der Hauptachse der beschreibenden Ellipse. Original Paper: Hufnagl 
            P, Schlosser A, Voss K. Merkmale der Form, Größe und Lage digitaler Objekte. Bild und Ton. 1984:37, 
            293-298.</summary>
        </member>
        <member name="M:SharpAccessory.Imaging.Classification.Features.Size.MajorAxisOfCorrespondingEllipse.#ctor(System.Double)">
            <summary>Erstellt und initialisiert eine neue Instanz.</summary>
            <param name="value">Gibt den Wert des Features an.</param>
        </member>
        <member name="M:SharpAccessory.Imaging.Classification.Features.Size.MajorAxisOfCorrespondingEllipse.#ctor(SharpAccessory.Imaging.Segmentation.CorrespondingEllipse)">
            <summary>Erstellt und initialisiert eine neue Instanz.</summary>
            <param name="e">Gibt den Wert des Features an.</param>
        </member>
        <member name="T:SharpAccessory.Imaging.Classification.Features.Size.MaximumDistanceToBorder">
            <summary>Bestimmt die größte auftretende Distanz zum Objektrand.</summary>
        </member>
        <member name="M:SharpAccessory.Imaging.Classification.Features.Size.MaximumDistanceToBorder.#ctor(System.Double)">
            <summary>Erstellt und initialisiert eine neue Instanz.</summary>
            <param name="value">Gibt den Wert des Features an.</param>
        </member>
        <member name="M:SharpAccessory.Imaging.Classification.Features.Size.MaximumDistanceToBorder.ProcessLayer(SharpAccessory.Imaging.Segmentation.ObjectLayer)">
            <summary>Berechnet dieses Feature für alle Objekte der angegebenen Objektebene.</summary>
            <param name="layer">Gibt die Objektebene an für die das Feature berechnet wird.</param>
        </member>
        <member name="M:SharpAccessory.Imaging.Classification.Features.Size.MaximumDistanceToBorder.ProcessLayer(SharpAccessory.Imaging.Segmentation.ObjectLayer,System.Double[0:,0:])">
            <summary>Berechnet dieses Feature für alle Objekte der angegebenen Objektebene.</summary>
            <param name="layer">Gibt die Objektebene an für die das Feature berechnet wird.</param>
            <param name="distanceMap">Enthält die Distanzdaten der Objektebene.</param>
        </member>
        <member name="M:SharpAccessory.Imaging.Classification.Features.Size.MaximumDistanceToBorder.GetValue(SharpAccessory.Imaging.Segmentation.ImageObject,System.Double[0:,0:])">
            <summary>Berechnet den Wert des Features für das angegebene Objekt.</summary>
            <param name="imageObject">Gibt das Objekt an für das das Feature berechnet wird.</param>
            <param name="distanceMap">Enthält die Distanzdaten der Objektebene.</param>
        </member>
        <member name="T:SharpAccessory.Imaging.Classification.Features.Size.MinorAxisOfCorrespondingEllipse">
            <summary>Repräsentiert die Länge der Nebenachse der beschreibenden Ellipse. Original Paper: Hufnagl 
            P, Schlosser A, Voss K. Merkmale der Form, Größe und Lage digitaler Objekte. Bild und Ton. 1984:37, 
            293-298.</summary>
        </member>
        <member name="M:SharpAccessory.Imaging.Classification.Features.Size.MinorAxisOfCorrespondingEllipse.#ctor(System.Double)">
            <summary>Erstellt und initialisiert eine neue Instanz.</summary>
            <param name="value">Gibt den Wert des Features an.</param>
        </member>
        <member name="M:SharpAccessory.Imaging.Classification.Features.Size.MinorAxisOfCorrespondingEllipse.#ctor(SharpAccessory.Imaging.Segmentation.CorrespondingEllipse)">
            <summary>Erstellt und initialisiert eine neue Instanz.</summary>
            <param name="e">Gibt den Wert des Features an.</param>
        </member>
        <member name="T:SharpAccessory.Imaging.Classification.Features.Size.ObjectPixels">
            <summary>Bestimmt die Anzahl der markierten Pixel von Objekten.</summary>
        </member>
        <member name="M:SharpAccessory.Imaging.Classification.Features.Size.ObjectPixels.#ctor(System.Double)">
            <summary>Erstellt und initialisiert eine neue Instanz.</summary>
            <param name="value">Gibt den Wert des Features an.</param>
        </member>
        <member name="M:SharpAccessory.Imaging.Classification.Features.Size.ObjectPixels.ProcessLayer(SharpAccessory.Imaging.Segmentation.ObjectLayer)">
            <summary>Berechnet dieses Feature für alle Objekte der angegebenen Objektebene.</summary>
            <param name="layer">Gibt die Objektebene an für die das Feature berechnet wird.</param>
        </member>
        <member name="M:SharpAccessory.Imaging.Classification.Features.Size.ObjectPixels.GetValue(SharpAccessory.Imaging.Segmentation.ImageObject)">
            <summary>Berechnet den Wert des Features für das angegebene Objekt.</summary>
            <param name="imageObject">Gibt das Objekt an für das das Feature berechnet wird.</param>
        </member>
        <member name="T:SharpAccessory.Imaging.Classification.LearningSample">
            <summary>Repräsentiert eine Lernstichprobe für das Training einer Klassifikation.</summary>
        </member>
        <member name="M:SharpAccessory.Imaging.Classification.LearningSample.#ctor(System.UInt32,SharpAccessory.Imaging.Classification.Class,SharpAccessory.Imaging.Classification.Feature[])">
            <summary>Erstellt und initialisiert eine neue Lernstichprobe.</summary>
            <param name="id">Gibt die Id der Stichprobe an. Gültige Ids sind alle Werte ungleich 0.</param>
            <param name="cls">Gibt die Klasse an zu der die Stichprobe gehört.</param>
            <param name="features">Enthält die Features der Stichprobe.</param>
        </member>
        <member name="P:SharpAccessory.Imaging.Classification.LearningSample.Id">
            <summary>Ruft die Id dieser Stichprobe ab. Gültige Ids sind alle Werte ungleich 0.</summary>
        </member>
        <member name="P:SharpAccessory.Imaging.Classification.LearningSample.Class">
            <summary>Ruft die Klasse ab zu der diese Stichprobe gehört.</summary>
        </member>
        <member name="P:SharpAccessory.Imaging.Classification.LearningSample.Features">
            <summary>Ruft die Liste der Features dieser Stichprobe ab.</summary>
        </member>
        <member name="T:SharpAccessory.Imaging.Classification.LearningSampleCollection">
            <summary>Verwaltet eine Liste von Lernstichproben.</summary>
        </member>
        <member name="M:SharpAccessory.Imaging.Classification.LearningSampleCollection.FindContainedClasses">
            <summary>Ruft die Liste aller enthaltenen Klassen ab.</summary>
        </member>
        <member name="M:SharpAccessory.Imaging.Classification.LearningSampleCollection.FindContainedFeatures">
            <summary>Ruft die Namen aller enthaltenen Features ab.</summary>
        </member>
        <member name="T:SharpAccessory.Imaging.Classification.LearningSampleFile">
            <summary>Liest und schreibt Lernstichproben-Dateien.</summary>
        </member>
        <member name="M:SharpAccessory.Imaging.Classification.LearningSampleFile.#ctor">
            <summary>Erstellt und initialisiert eine neue Instanz.</summary>
        </member>
        <member name="M:SharpAccessory.Imaging.Classification.LearningSampleFile.FromFile(System.String)">
            <summary>Öffnet und liest die angegebene Lernstichproben-Datei.</summary>
        </member>
        <member name="M:SharpAccessory.Imaging.Classification.LearningSampleFile.FromBuffer(System.Byte[])">
            <summary>Liest eine Lernstichproben-Datei aus dem angegebenen Puffer.</summary>
        </member>
        <member name="M:SharpAccessory.Imaging.Classification.LearningSampleFile.FromStream(System.IO.Stream)">
            <summary>Liest eine Lernstichproben-Datei aus dem angegebenen Stream.</summary>
        </member>
        <member name="M:SharpAccessory.Imaging.Classification.LearningSampleFile.FromXmlDoc(System.Xml.XmlDocument)">
            <summary>Liest eine Lernstichproben-Datei aus dem angegebenen XML-Dokument.</summary>
        </member>
        <member name="M:SharpAccessory.Imaging.Classification.LearningSampleFile.SaveToFile(System.String)">
            <summary>Speichert den aktuellen Inhalt in die angegebene Datei.</summary>
        </member>
        <member name="M:SharpAccessory.Imaging.Classification.LearningSampleFile.SaveToBuffer">
            <summary>Speichert den aktuellen Inhalt in einen neuen Puffer.</summary>
        </member>
        <member name="P:SharpAccessory.Imaging.Classification.LearningSampleFile.Samples">
            <summary>Ruft die Liste der in dieser Datei enthaltenen Lernstichproben ab.</summary>
        </member>
        <member name="P:SharpAccessory.Imaging.Classification.LearningSampleFile.IsWellKnownVersion">
            <summary>Ruft einen Wert ab, der angibt, ob die Version der geöffneten Datei bekannt ist. Wenn 
            eine Datei mit einer unbekannten Version gelesen und anschließend gespeichert wird kann es zum 
            Datenverlust kommen.</summary>
        </member>
        <member name="P:SharpAccessory.Imaging.Classification.LearningSampleFile.FormatName">
            <summary>Ruft den Namen des Dateiformats ab.</summary>
            <returns>LearningSamples</returns>
        </member>
        <member name="P:SharpAccessory.Imaging.Classification.LearningSampleFile.FileExtension">
            <summary>Ruft die zu diesem Dateiformat gehörende Dateierweiterung ab.</summary>
            <returns>.xml</returns>
        </member>
        <member name="P:SharpAccessory.Imaging.Classification.LearningSampleFile.Empty">
            <summary>Erzeugt eine leere Datei.</summary>
        </member>
        <member name="T:SharpAccessory.Imaging.Classification.ThresholdFinder">
            <summary>Bestimmt den optimalen Schwellwert zur Trennung von zwei Klassen. Original Paper: Otsu N. A 
            threshold selection method from gray level histograms. IEEE Transactions on Systems, Man and 
            Cybernetics 1979:9(1), 62-66.</summary>
        </member>
        <member name="M:SharpAccessory.Imaging.Classification.ThresholdFinder.FindOptimalThreshold(SharpAccessory.Imaging.Processors.GrayscaleProcessor)">
            <summary>Bestimmt den optimalen Schwellwert zur Trennung von zwei Klassen.</summary>
            <param name="processor">Bietet Zugriff auf die Bilddaten.</param>
            <returns>-1, wenn das Histogram leer ist oder alle Werte in einem Feld liegen, sonst den 
            optimalen Schwellwert.</returns>
        </member>
        <member name="M:SharpAccessory.Imaging.Classification.ThresholdFinder.FindOptimalThreshold(System.Int32[])">
            <summary>Bestimmt den optimalen Schwellwert zur Trennung von zwei Klassen.</summary>
            <param name="histogram">Das Histogramm der Pixelintensitäten.</param>
            <returns>-1, wenn das Histogram leer ist oder alle Werte in einem Feld liegen, sonst den 
            optimalen Schwellwert.</returns>
        </member>
        <member name="M:SharpAccessory.Imaging.Classification.ThresholdFinder.GetHistogram(SharpAccessory.Imaging.Processors.GrayscaleProcessor)">
            <summary>Berechnet das Histogramm der Pixelintensitäten.</summary>
            <param name="processor">Bietet Zugriff auf die Bilddaten.</param>
        </member>
        <member name="T:SharpAccessory.Imaging.Classification.TrueSignalDetector">
            <summary>Findet den optimalen Schwellwert zur Bestimmung des "echten" Signals in Objekten.</summary>
        </member>
        <member name="M:SharpAccessory.Imaging.Classification.TrueSignalDetector.Execute(SharpAccessory.Imaging.Segmentation.ObjectLayer,SharpAccessory.Imaging.Processors.GrayscaleProcessor)">
            <summary>Führt die Analyse aus.</summary>
            <param name="layer">Enthält die (Kandidaten-) Objekte.</param>
            <param name="processor">Bietet Zugriff auf die Bilddaten.</param>
        </member>
        <member name="M:SharpAccessory.Imaging.Classification.TrueSignalDetector.Execute(SharpAccessory.Imaging.Segmentation.ObjectLayer,SharpAccessory.Imaging.Processors.GrayscaleProcessor,SharpAccessory.Imaging.Classification.TrueSignalDetector.Mode)">
            <summary>Führt die Analyse aus.</summary>
            <param name="layer">Enthält die (Kandidaten-) Objekte.</param>
            <param name="processor">Bietet Zugriff auf die Bilddaten.</param>
            <param name="mode">Gibt an wie die Positivität von Objekten bestimmt wird.</param>
        </member>
        <member name="T:SharpAccessory.Imaging.Classification.TrueSignalDetector.AnalysisInfo">
            <summary>Enthält die Ergebnisse der Analyse.</summary>
        </member>
        <member name="M:SharpAccessory.Imaging.Classification.TrueSignalDetector.AnalysisInfo.#ctor(SharpAccessory.Imaging.Classification.TrueSignalDetector.ThresholdInfo[],System.Int32)">
            <summary>Erstellt und initialisiert eine neue Instanz.</summary>
            <param name="allThresholds">Gibt die Schwellwertdaten an.</param>
            <param name="optimalThreshold">Gibt den optimalen Schwellwert an.</param>
        </member>
        <member name="P:SharpAccessory.Imaging.Classification.TrueSignalDetector.AnalysisInfo.OptimalThreshold">
            <summary>Ruft den optimalen Schwellwert ab.</summary>
        </member>
        <member name="P:SharpAccessory.Imaging.Classification.TrueSignalDetector.AnalysisInfo.AllThresholds">
            <summary>Ruft die Schwellwertdaten ab.</summary>
        </member>
        <member name="T:SharpAccessory.Imaging.Classification.TrueSignalDetector.Mode">
            <summary>Gibt an wie die Positivität von Objekten bestimmt wird.</summary>
        </member>
        <member name="F:SharpAccessory.Imaging.Classification.TrueSignalDetector.Mode.Maximum">
            <summary>Ein Objekt ist positiv, wenn der höchste Wert über dem Schwellwert liegt.</summary>
        </member>
        <member name="F:SharpAccessory.Imaging.Classification.TrueSignalDetector.Mode.Mean">
            <summary>Ein Objekt ist positiv, wenn der Mittelwert über dem Schwellwert liegt.</summary>
        </member>
        <member name="F:SharpAccessory.Imaging.Classification.TrueSignalDetector.Mode.Minimum">
            <summary>Ein Objekt ist positiv, wenn der kleinste Wert über dem Schwellwert liegt.</summary>
        </member>
        <member name="T:SharpAccessory.Imaging.Classification.TrueSignalDetector.ThresholdInfo">
            <summary>Enthält die Daten zu einem Schwellwert.</summary>
        </member>
        <member name="M:SharpAccessory.Imaging.Classification.TrueSignalDetector.ThresholdInfo.#ctor(System.Int32,System.Double,System.Double,System.Double,System.Double)">
            <summary>Erstellt und initialisiert eine neue Instanz.</summary>
            <param name="threshold">Gibt den Schwellwert an.</param>
            <param name="ratio">Gibt den Anteil der positiven Objekte an.</param>
            <param name="fMeasure">Gibt das F-Maß an.</param>
            <param name="precision">Gibt die Genauigkeit an.</param>
            <param name="recall">Gibt die Trefferquote an.</param>
        </member>
        <member name="P:SharpAccessory.Imaging.Classification.TrueSignalDetector.ThresholdInfo.Threshold">
            <summary>Ruft den Schwellwert ab.</summary>
        </member>
        <member name="P:SharpAccessory.Imaging.Classification.TrueSignalDetector.ThresholdInfo.Ratio">
            <summary>Ruft den Anteil der positiven Objekte ab.</summary>
        </member>
        <member name="P:SharpAccessory.Imaging.Classification.TrueSignalDetector.ThresholdInfo.FMeasure">
            <summary>Ruft das F-Maß ab.</summary>
        </member>
        <member name="P:SharpAccessory.Imaging.Classification.TrueSignalDetector.ThresholdInfo.Precision">
            <summary>Ruft die Genauigkeit ab.</summary>
        </member>
        <member name="P:SharpAccessory.Imaging.Classification.TrueSignalDetector.ThresholdInfo.Recall">
            <summary>Ruft die Trefferquote ab.</summary>
        </member>
        <member name="T:SharpAccessory.Imaging.Classification.TrueSignalDetector.ThresholdInfoCollection">
            <summary>Verwaltet eine Liste von Schwellwertdaten.</summary>
        </member>
        <member name="M:SharpAccessory.Imaging.Classification.TrueSignalDetector.ThresholdInfoCollection.#ctor(SharpAccessory.Imaging.Classification.TrueSignalDetector.ThresholdInfo[])">
            <summary>Erstellt und initialisiert eine neue Instanz.</summary>
            <param name="thresholds">Gibt die Daten an die in der Liste verwaltet werden.</param>
        </member>
        <member name="T:SharpAccessory.Imaging.Classification.Vote">
            <summary>Enthält das Ergebnis einer Klassifikation.</summary>
        </member>
        <member name="M:SharpAccessory.Imaging.Classification.Vote.#ctor(SharpAccessory.Imaging.Classification.Class)">
            <summary>Erstellt und initialisiert eine neue Instanz.</summary>
            <param name="cls">Gibt die Klasse mit der höchsten Zugehörigkeits-Warscheinlichkeit an.</param>
        </member>
        <member name="M:SharpAccessory.Imaging.Classification.Vote.#ctor(SharpAccessory.Imaging.Classification.Class,System.Double)">
            <summary>Erstellt und initialisiert eine neue Instanz.</summary>
            <param name="cls">Gibt die Klasse mit der höchsten Zugehörigkeits-Warscheinlichkeit an.</param>
            <param name="certitude">Gibt die Gewissheit der Entscheidung an.</param>
        </member>
        <member name="M:SharpAccessory.Imaging.Classification.Vote.ToString">
            <summary>Konvertiert diese Instanz in eine lesbare Zeichenfolge.</summary>
        </member>
        <member name="P:SharpAccessory.Imaging.Classification.Vote.Class">
            <summary>Ruft die Klasse mit der höchsten Zugehörigkeits-Warscheinlichkeit ab, oder legt diese 
            fest.</summary>
        </member>
        <member name="P:SharpAccessory.Imaging.Classification.Vote.Certitude">
            <summary>Ruft die Gewissheit der Entscheidung ab, oder legt diese fest.</summary>
        </member>
        <member name="P:SharpAccessory.Imaging.Classification.Vote.IsEmpty">
            <summary>Ruft einen Wert ab, der angibt, ob alle Werte auf deren Default gesetzt sind.</summary>
        </member>
        <member name="P:SharpAccessory.Imaging.Classification.Vote.Empty">
            <summary>Erzeugt eine neue Instanz mit allen Werten auf deren Default gesetzt.</summary>
        </member>
        <member name="T:SharpAccessory.Imaging.DigitalPathology.TissueDetector">
            <summary>Findet Gewebspartikel in Übersichtsbildern von Virtuellen Schnitten.</summary>
        </member>
        <member name="M:SharpAccessory.Imaging.DigitalPathology.TissueDetector.Execute(SharpAccessory.Imaging.Processors.GrayscaleProcessor,System.Int32,System.Int32)">
            <summary>Findet Gewebspartikel in Übersichtsbildern von Virtuellen Schnitten.</summary>
            <param name="processor">Bietet Zugriff auf die Bilddaten.</param>
            <param name="radius">Gibt den Radius des Filterkerns an.</param>
            <param name="noiseLevel">Gibt die Rauschintensität des Bildes an.</param>
        </member>
        <member name="T:SharpAccessory.Imaging.Filters.ColorDeconvolution">
            <summary>Führt die Farb-Deconvolution nach Ruifrok und Johnston aus. Original Paper: Ruifrok AC, 
            Johnston DA. Quantification of histochemical staining by color deconvolution. Anal Quant Cytol 
            Histol. 2001:23, 291-299.</summary>
        </member>
        <member name="M:SharpAccessory.Imaging.Filters.ColorDeconvolution.Get1stStain(System.Drawing.Bitmap,SharpAccessory.Imaging.Filters.ColorDeconvolution.KnownStain)">
            <summary>Extrahiert die Anteile der 1. Färbung aus dem angegebenen Bild.</summary>
        </member>
        <member name="M:SharpAccessory.Imaging.Filters.ColorDeconvolution.Get1stStain(System.Drawing.Bitmap,System.Double[],System.Double[],System.Double[])">
            <summary>Extrahiert die Anteile der 1. Färbung aus dem angegebenen Bild.</summary>
        </member>
        <member name="M:SharpAccessory.Imaging.Filters.ColorDeconvolution.Get1stStain(SharpAccessory.Imaging.Processors.BitmapProcessor,SharpAccessory.Imaging.Filters.ColorDeconvolution.KnownStain)">
            <summary>Extrahiert die Anteile der 1. Färbung aus dem angegebenen Bild.</summary>
        </member>
        <member name="M:SharpAccessory.Imaging.Filters.ColorDeconvolution.Get1stStain(SharpAccessory.Imaging.Processors.BitmapProcessor,System.Double[],System.Double[],System.Double[])">
            <summary>Extrahiert die Anteile der 1. Färbung aus dem angegebenen Bild.</summary>
        </member>
        <member name="M:SharpAccessory.Imaging.Filters.ColorDeconvolution.Get2ndStain(System.Drawing.Bitmap,SharpAccessory.Imaging.Filters.ColorDeconvolution.KnownStain)">
            <summary>Extrahiert die Anteile der 2. Färbung aus dem angegebenen Bild.</summary>
        </member>
        <member name="M:SharpAccessory.Imaging.Filters.ColorDeconvolution.Get2ndStain(System.Drawing.Bitmap,System.Double[],System.Double[],System.Double[])">
            <summary>Extrahiert die Anteile der 2. Färbung aus dem angegebenen Bild.</summary>
        </member>
        <member name="M:SharpAccessory.Imaging.Filters.ColorDeconvolution.Get2ndStain(SharpAccessory.Imaging.Processors.BitmapProcessor,SharpAccessory.Imaging.Filters.ColorDeconvolution.KnownStain)">
            <summary>Extrahiert die Anteile der 2. Färbung aus dem angegebenen Bild.</summary>
        </member>
        <member name="M:SharpAccessory.Imaging.Filters.ColorDeconvolution.Get2ndStain(SharpAccessory.Imaging.Processors.BitmapProcessor,System.Double[],System.Double[],System.Double[])">
            <summary>Extrahiert die Anteile der 2. Färbung aus dem angegebenen Bild.</summary>
        </member>
        <member name="M:SharpAccessory.Imaging.Filters.ColorDeconvolution.Get3rdStain(System.Drawing.Bitmap,SharpAccessory.Imaging.Filters.ColorDeconvolution.KnownStain)">
            <summary>Extrahiert die Anteile der 3. Färbung aus dem angegebenen Bild.</summary>
        </member>
        <member name="M:SharpAccessory.Imaging.Filters.ColorDeconvolution.Get3rdStain(System.Drawing.Bitmap,System.Double[],System.Double[],System.Double[])">
            <summary>Extrahiert die Anteile der 3. Färbung aus dem angegebenen Bild.</summary>
        </member>
        <member name="M:SharpAccessory.Imaging.Filters.ColorDeconvolution.Get3rdStain(SharpAccessory.Imaging.Processors.BitmapProcessor,SharpAccessory.Imaging.Filters.ColorDeconvolution.KnownStain)">
            <summary>Extrahiert die Anteile der 3. Färbung aus dem angegebenen Bild.</summary>
        </member>
        <member name="M:SharpAccessory.Imaging.Filters.ColorDeconvolution.Get3rdStain(SharpAccessory.Imaging.Processors.BitmapProcessor,System.Double[],System.Double[],System.Double[])">
            <summary>Extrahiert die Anteile der 3. Färbung aus dem angegebenen Bild.</summary>
        </member>
        <member name="T:SharpAccessory.Imaging.Filters.ColorDeconvolution.KnownStain">
            <summary>Listet die bekannten immunhistochemischen Färbungen auf.</summary>
        </member>
        <member name="F:SharpAccessory.Imaging.Filters.ColorDeconvolution.KnownStain.HaematoxylinEosin">
            <summary>Haematoxylin und Eosin</summary>
        </member>
        <member name="F:SharpAccessory.Imaging.Filters.ColorDeconvolution.KnownStain.HaematoxylinDAB">
            <summary>Haematoxylin und 3,3'-Diaminobenzidine (DAB)</summary>
        </member>
        <member name="F:SharpAccessory.Imaging.Filters.ColorDeconvolution.KnownStain.FastRedFastBlueDAB">
            <summary>Fast-Red und Fast-Blue und 3,3'-Diaminobenzidine (DAB)</summary>
        </member>
        <member name="F:SharpAccessory.Imaging.Filters.ColorDeconvolution.KnownStain.MethylGreenDAB">
            <summary>Methyl-Green und 3,3'-Diaminobenzidine (DAB)</summary>
        </member>
        <member name="F:SharpAccessory.Imaging.Filters.ColorDeconvolution.KnownStain.HaematoxylinEosinDAB">
            <summary>Haematoxylin und Eosin und 3,3'-Diaminobenzidine (DAB)</summary>
        </member>
        <member name="F:SharpAccessory.Imaging.Filters.ColorDeconvolution.KnownStain.HaematoxylinAEC">
            <summary>Haematoxylin und 3-Amino-9-Ethylcarbazole (AEC)</summary>
        </member>
        <member name="F:SharpAccessory.Imaging.Filters.ColorDeconvolution.KnownStain.AlcianBlueHaematoxylin">
            <summary>Alcian-Blue und Haematoxylin</summary>
        </member>
        <member name="F:SharpAccessory.Imaging.Filters.ColorDeconvolution.KnownStain.HaematoxylinPAS">
            <summary>Haematoxylin und Periodic Acid-Schiff (PAS)</summary>
        </member>
        <member name="T:SharpAccessory.Imaging.Filters.DistanceTransformation">
            <summary>Berechnet näherungsweise die euklidische Distanz von Objektpixeln zum Rand des Objekts. 
            Original Paper: Velić M, May D, Moresi L. A Fast Robust Algorithm for Computing Discrete Voronoi 
            Diagrams. J Math Model Algor. 2009:8, 343–355.</summary>
        </member>
        <member name="M:SharpAccessory.Imaging.Filters.DistanceTransformation.Execute(SharpAccessory.Imaging.Segmentation.ObjectLayer)">
            <summary>Berechnet die euklidische Distanz von Objektpixeln zum Rand des Objekts.</summary>
        </member>
        <member name="M:SharpAccessory.Imaging.Filters.DistanceTransformation.Execute(SharpAccessory.Imaging.Segmentation.IMap)">
            <summary>Berechnet die euklidische Distanz von Objektpixeln zum Rand des Objekts.</summary>
        </member>
        <member name="T:SharpAccessory.Imaging.Filters.FastDistanceTransformation">
            <summary>Berechnet die Manhattan-Distanz von Objektpixeln zum Rand des Objekts. Original Paper: 
            Wienert, S. et al. Detection and Segmentation of Cell Nuclei in Virtual Microscopy Images: A 
            Minimum-Model Approach. Sci. Rep. 2, 503; DOI:10.1038/srep00503 (2012).</summary>
        </member>
        <member name="M:SharpAccessory.Imaging.Filters.FastDistanceTransformation.Execute(SharpAccessory.Imaging.Segmentation.ObjectLayer)">
            <summary>Berechnet die Manhattan-Distanz von Objektpixeln zum Rand des Objekts.</summary>
        </member>
        <member name="M:SharpAccessory.Imaging.Filters.FastDistanceTransformation.Execute(SharpAccessory.Imaging.Segmentation.IMap)">
            <summary>Berechnet die Manhattan-Distanz von Objektpixeln zum Rand des Objekts.</summary>
        </member>
        <member name="T:SharpAccessory.Imaging.Filters.MaximumFilter">
            <summary>Führt den Maximum-Filter auf einem Graustufen-Prozessor aus.</summary>
        </member>
        <member name="T:SharpAccessory.Imaging.Filters.FilterBase">
            <summary>Basis-Klasse für Filter.</summary>
        </member>
        <member name="M:SharpAccessory.Imaging.Filters.FilterBase.EnsureValidKernelSize(System.Drawing.Size)">
            <summary>Löst eine System.ArgumentException aus wenn die angegebene Kerngröße ungültig ist.
            </summary>
        </member>
        <member name="M:SharpAccessory.Imaging.Filters.MaximumFilter.Execute(SharpAccessory.Imaging.Processors.GrayscaleProcessor,System.Drawing.Size)">
            <summary>Führt den Filter auf dem angegebenen Prozessor aus.</summary>
            <param name="processor">Bietet Zugriff auf die Bilddaten.</param>
            <param name="kernel">Gibt die Höhe und Breite des Filterkerns an.</param>
        </member>
        <member name="T:SharpAccessory.Imaging.Filters.MeanFilter">
            <summary>Führt den Mittelwert-Filter auf einem Graustufen-Prozessor aus.</summary>
        </member>
        <member name="M:SharpAccessory.Imaging.Filters.MeanFilter.Execute(SharpAccessory.Imaging.Processors.GrayscaleProcessor,System.Drawing.Size)">
            <summary>Führt den Filter auf dem angegebenen Prozessor aus.</summary>
            <param name="processor">Bietet Zugriff auf die Bilddaten.</param>
            <param name="kernel">Gibt die Höhe und Breite des Filterkerns an.</param>
        </member>
        <member name="T:SharpAccessory.Imaging.Filters.MedianFilter">
            <summary>Führt den Median-Filter auf einem Graustufen-Prozessor aus.</summary>
        </member>
        <member name="M:SharpAccessory.Imaging.Filters.MedianFilter.Execute(SharpAccessory.Imaging.Processors.GrayscaleProcessor,System.Drawing.Size)">
            <summary>Führt den Filter auf dem angegebenen Prozessor aus.</summary>
            <param name="processor">Bietet Zugriff auf die Bilddaten.</param>
            <param name="kernel">Gibt die Höhe und Breite des Filterkerns an.</param>
        </member>
        <member name="T:SharpAccessory.Imaging.Filters.MinimumFilter">
            <summary>Führt den Minimum-Filter auf einem Graustufen-Prozessor aus.</summary>
        </member>
        <member name="M:SharpAccessory.Imaging.Filters.MinimumFilter.Execute(SharpAccessory.Imaging.Processors.GrayscaleProcessor,System.Drawing.Size)">
            <summary>Führt den Filter auf dem angegebenen Prozessor aus.</summary>
            <param name="processor">Bietet Zugriff auf die Bilddaten.</param>
            <param name="kernel">Gibt die Höhe und Breite des Filterkerns an.</param>
        </member>
        <member name="T:SharpAccessory.Imaging.Filters.PixelInverter">
            <summary>Invertiert Pixel von ARGB und Graustufen-Bildern.</summary>
        </member>
        <member name="M:SharpAccessory.Imaging.Filters.PixelInverter.Execute(SharpAccessory.Imaging.Processors.BitmapProcessor)">
            <summary>Invertiert alle Pixel des angegebenen Prozessors.</summary>
        </member>
        <member name="M:SharpAccessory.Imaging.Filters.PixelInverter.Execute(SharpAccessory.Imaging.Processors.GrayscaleProcessor)">
            <summary>Invertiert alle Pixel des angegebenen Prozessors.</summary>
        </member>
        <member name="T:SharpAccessory.Imaging.Filters.SobelEdgeDetector">
            <summary>Berechnet ein Gradientenbild mit dem 3x3 Sobel-Operator.</summary>
        </member>
        <member name="M:SharpAccessory.Imaging.Filters.SobelEdgeDetector.Execute(SharpAccessory.Imaging.Processors.GrayscaleProcessor)">
            <summary>Führt den 3x3 Sobel-Operator auf dem angegebenen Prozessor aus.</summary>
        </member>
        <member name="T:SharpAccessory.Imaging.Networking.ObjectHierarchy">
            <summary>Listet das zu einem Objekt übergeordnete sowie die eingeschlossenen Objekte auf.</summary>
        </member>
        <member name="M:SharpAccessory.Imaging.Networking.ObjectHierarchy.#ctor(SharpAccessory.Imaging.Segmentation.ImageObject,SharpAccessory.Imaging.Segmentation.ImageObject,SharpAccessory.Imaging.Segmentation.ImageObject[])">
            <summary>Erstellt und initialisiert eine neue Instanz.</summary>
            <param name="center">Gibt das betreffende Objekt an.</param>
            <param name="parent">Gibt das übergeordnete Objekt an.</param>
            <param name="children">Enthält die eingeschlossenen Objekte.</param>
        </member>
        <member name="P:SharpAccessory.Imaging.Networking.ObjectHierarchy.Center">
            <summary>Ruft das betreffende Objekt ab.</summary>
        </member>
        <member name="P:SharpAccessory.Imaging.Networking.ObjectHierarchy.Parent">
            <summary>Ruft das übergeordnete Objekt ab.</summary>
        </member>
        <member name="P:SharpAccessory.Imaging.Networking.ObjectHierarchy.Children">
            <summary>Ruft die Liste der eingeschlossenen Objekte ab.</summary>
        </member>
        <member name="T:SharpAccessory.Imaging.Networking.ObjectHierarchyCollection">
            <summary>Verwaltet eine Liste von Objekthierarchien.</summary>
        </member>
        <member name="M:SharpAccessory.Imaging.Networking.ObjectHierarchyCollection.#ctor(SharpAccessory.Imaging.Networking.ObjectHierarchy[])">
            <summary>Erstellt und initialisiert eine neue Instanz.</summary>
        </member>
        <member name="M:SharpAccessory.Imaging.Networking.ObjectHierarchyCollection.GetHierarchyByObject(SharpAccessory.Imaging.Segmentation.ImageObject)">
            <summary>Ruft die Hierarchie zu dem angegebenen Objekt ab.</summary>
        </member>
        <member name="P:SharpAccessory.Imaging.Networking.ObjectHierarchyCollection.Item(SharpAccessory.Imaging.Segmentation.ImageObject)">
            <summary>Ruft die Hierarchie zu dem angegebenen Objekt ab.</summary>
        </member>
        <member name="T:SharpAccessory.Imaging.Networking.ObjectNeighbourhood">
            <summary>Listet die zu einem Objekt benachbarten Objekte auf.</summary>
        </member>
        <member name="M:SharpAccessory.Imaging.Networking.ObjectNeighbourhood.#ctor(SharpAccessory.Imaging.Segmentation.ImageObject,SharpAccessory.Imaging.Segmentation.ImageObject[])">
            <summary>Erstellt und initialisiert eine neue Instanz.</summary>
            <param name="center">Gibt das betreffende Objekt an.</param>
            <param name="neighbours">Enthält die benachbarten Objekte.</param>
        </member>
        <member name="P:SharpAccessory.Imaging.Networking.ObjectNeighbourhood.Center">
            <summary>Ruft das betreffende Objekt ab.</summary>
        </member>
        <member name="P:SharpAccessory.Imaging.Networking.ObjectNeighbourhood.Neighbours">
            <summary>Ruft die Liste der benachbarten Objekte ab.</summary>
        </member>
        <member name="T:SharpAccessory.Imaging.Networking.ObjectNeighbourhoodCollection">
            <summary>Verwaltet eine Liste von Nachbarschaftsbeziehungen.</summary>
        </member>
        <member name="M:SharpAccessory.Imaging.Networking.ObjectNeighbourhoodCollection.#ctor(SharpAccessory.Imaging.Networking.ObjectNeighbourhood[])">
            <summary>Erstellt und initialisiert eine neue Instanz.</summary>
        </member>
        <member name="M:SharpAccessory.Imaging.Networking.ObjectNeighbourhoodCollection.GetNeighbourhoodByObject(SharpAccessory.Imaging.Segmentation.ImageObject)">
            <summary>Ruft die Nachbarschaftsbeziehungen zu dem angegebenen Objekt ab.</summary>
        </member>
        <member name="P:SharpAccessory.Imaging.Networking.ObjectNeighbourhoodCollection.Item(SharpAccessory.Imaging.Segmentation.ImageObject)">
            <summary>Ruft die Nachbarschaftsbeziehungen zu dem angegebenen Objekt ab.</summary>
        </member>
        <member name="T:SharpAccessory.Imaging.Networking.ObjectNetwork">
            <summary>Berechnet die topologischen Beziehungen zwischen Objekten einer Objektebene.</summary>
        </member>
        <member name="M:SharpAccessory.Imaging.Networking.ObjectNetwork.#ctor(SharpAccessory.Imaging.Segmentation.ObjectLayer)">
            <summary>Erstellt und initialisiert eine neue Instanz.</summary>
            <param name="layer">Gibt die betreffende Objektebene an.</param>
        </member>
        <member name="M:SharpAccessory.Imaging.Networking.ObjectNetwork.#ctor(SharpAccessory.Imaging.Segmentation.ObjectLayer,SharpAccessory.Imaging.Segmentation.ObjectLayer)">
            <summary>Erstellt und initialisiert eine neue Instanz.</summary>
            <param name="layer">Gibt die betreffende Objektebene an.</param>
            <param name="tesselation">Gibt die Tesselation der Objektebene an.</param>
        </member>
        <member name="P:SharpAccessory.Imaging.Networking.ObjectNetwork.Layer">
            <summary>Ruft die betreffende Objektebene ab.</summary>
        </member>
        <member name="P:SharpAccessory.Imaging.Networking.ObjectNetwork.Tesselation">
            <summary>Ruft die Tesselation der Objektebene ab.</summary>
        </member>
        <member name="P:SharpAccessory.Imaging.Networking.ObjectNetwork.Neighbourhood">
            <summary>Ruft die Nachbarschaftsbeziehungen ab.</summary>
        </member>
        <member name="P:SharpAccessory.Imaging.Networking.ObjectNetwork.Hierarchy">
            <summary>Ruft die Hierachie ab.</summary>
        </member>
        <member name="T:SharpAccessory.Imaging.Networking.VoronoiTesselation">
            <summary>Berechnet näherungsweise die diskrete Voronoi-Tesselation für Objektebenen und Punktmengen. 
            Original Paper: Velić M, May D, Moresi L. A Fast Robust Algorithm for Computing Discrete Voronoi 
            Diagrams. J Math Model Algor. 2009:8, 343–355.</summary>
        </member>
        <member name="M:SharpAccessory.Imaging.Networking.VoronoiTesselation.GetTesselationLayer(SharpAccessory.Imaging.Segmentation.ObjectLayer)">
            <summary>Berechnet die Voronoi-Tesselation und erzeugt eine neue Objektebene.</summary>
            <param name="layer">Gibt die Objektebene an für die die Tesselation berechnet wird.</param>
        </member>
        <member name="M:SharpAccessory.Imaging.Networking.VoronoiTesselation.GetTesselationMap(SharpAccessory.Imaging.Segmentation.ObjectLayer)">
            <summary>Berechnet die Voronoi-Tesselation für die angegebene Objektebene.</summary>
            <param name="layer">Gibt die Objektebene an für die die Tesselation berechnet wird.</param>
        </member>
        <member name="M:SharpAccessory.Imaging.Networking.VoronoiTesselation.GetTesselationMap(SharpAccessory.Imaging.Segmentation.IMap)">
            <summary>Berechnet die Voronoi-Tesselation für die angegebene Map.</summary>
            <param name="map">Gibt die Map an für die die Tesselation berechnet wird.</param>
        </member>
        <member name="T:SharpAccessory.Imaging.Processors.BitmapProcessor">
            <summary>Bietet Zugriff auf Pixel eines System.Drawing.Bitmap im ARGB-Format.</summary>
        </member>
        <member name="M:SharpAccessory.Imaging.Processors.BitmapProcessor.#ctor(System.Drawing.Bitmap)">
            <summary>Erstellt und initialisiert eine neue Instanz.</summary>
        </member>
        <member name="M:SharpAccessory.Imaging.Processors.BitmapProcessor.Finalize">
            <summary>Gibt die Ressourcen des Prozessors frei.</summary>
        </member>
        <member name="M:SharpAccessory.Imaging.Processors.BitmapProcessor.GetPixels">
            <summary>Ruft alle Pixel-Werte als Array ab.</summary>
        </member>
        <member name="M:SharpAccessory.Imaging.Processors.BitmapProcessor.GetPixel(System.Int32,System.Int32)">
            <summary>Ruft den Pixel-Wert an der Position [x, y] ab.</summary>
        </member>
        <member name="M:SharpAccessory.Imaging.Processors.BitmapProcessor.GetAlpha(System.Int32,System.Int32)">
            <summary>Ruft den Wert des Alpha-Kanals an der Position [x, y] ab.</summary>
        </member>
        <member name="M:SharpAccessory.Imaging.Processors.BitmapProcessor.GetRed(System.Int32,System.Int32)">
            <summary>Ruft den Wert des Rot-Kanals an der Position [x, y] ab.</summary>
        </member>
        <member name="M:SharpAccessory.Imaging.Processors.BitmapProcessor.GetGreen(System.Int32,System.Int32)">
            <summary>Ruft den Wert des Grün-Kanals an der Position [x, y] ab.</summary>
        </member>
        <member name="M:SharpAccessory.Imaging.Processors.BitmapProcessor.GetBlue(System.Int32,System.Int32)">
            <summary>Ruft den Wert des Blau-Kanals an der Position [x, y] ab.</summary>
        </member>
        <member name="M:SharpAccessory.Imaging.Processors.BitmapProcessor.SetPixels(System.UInt32[])">
            <summary>Ersetzt alle Pixel durch die im Array angegebenen Werte.</summary>
        </member>
        <member name="M:SharpAccessory.Imaging.Processors.BitmapProcessor.SetPixel(System.Int32,System.Int32,System.UInt32)">
            <summary>Setzt den Pixel-Wert an der Position [x, y].</summary>
        </member>
        <member name="M:SharpAccessory.Imaging.Processors.BitmapProcessor.SetAlpha(System.Int32,System.Int32,System.Byte)">
            <summary>Setzt den Wert des Alpha-Kanals an der Position [x, y].</summary>
        </member>
        <member name="M:SharpAccessory.Imaging.Processors.BitmapProcessor.SetRed(System.Int32,System.Int32,System.Byte)">
            <summary>Setzt den Wert des Rot-Kanals an der Position [x, y].</summary>
        </member>
        <member name="M:SharpAccessory.Imaging.Processors.BitmapProcessor.SetGreen(System.Int32,System.Int32,System.Byte)">
            <summary>Setzt den Wert des Grün-Kanals an der Position [x, y].</summary>
        </member>
        <member name="M:SharpAccessory.Imaging.Processors.BitmapProcessor.SetBlue(System.Int32,System.Int32,System.Byte)">
            <summary>Setzt den Wert des Blau-Kanals an der Position [x, y].</summary>
        </member>
        <member name="M:SharpAccessory.Imaging.Processors.BitmapProcessor.Clone">
            <summary>Erzeugt eine Kopie des Prozessors und des zugrunde liegenden Bitmaps.</summary>
        </member>
        <member name="M:SharpAccessory.Imaging.Processors.BitmapProcessor.Dispose">
            <summary>Gibt den Prozessor frei.</summary>
        </member>
        <member name="P:SharpAccessory.Imaging.Processors.BitmapProcessor.Item(System.Int32,System.Int32)">
            <summary>Ruft den Pixel an der Position [x, y] ab, oder legt diesen fest.</summary>
        </member>
        <member name="P:SharpAccessory.Imaging.Processors.BitmapProcessor.Width">
            <summary>Ruft die Breite des Bildes ab.</summary>
        </member>
        <member name="P:SharpAccessory.Imaging.Processors.BitmapProcessor.Height">
            <summary>Ruft die Höhe des Bildes ab.</summary>
        </member>
        <member name="P:SharpAccessory.Imaging.Processors.BitmapProcessor.Scan0">
            <summary>Ruft die Adresse der ersten Bilddaten ab.</summary>
        </member>
        <member name="P:SharpAccessory.Imaging.Processors.BitmapProcessor.Bitmap">
            <summary>Ruft das zugrunde liegende Bitmap ab.</summary>
        </member>
        <member name="P:SharpAccessory.Imaging.Processors.BitmapProcessor.ReadOnly">
            <summary>Diese Eigenschaft ist für diese Klasse nicht relevant.</summary>
            <returns>false</returns>
        </member>
        <member name="P:SharpAccessory.Imaging.Processors.BitmapProcessor.IsDisposed">
            <summary>Ruft einen Wert ab, der angibt, ob dieser Prozessor bereits freigegeben wurde.</summary>
        </member>
        <member name="T:SharpAccessory.Imaging.Processors.GrayscaleProcessor">
            <summary>Bietet Zugriff auf Pixel eines System.Drawing.Bitmap im Graustufen-Format.</summary>
        </member>
        <member name="M:SharpAccessory.Imaging.Processors.GrayscaleProcessor.#ctor(System.Drawing.Bitmap,SharpAccessory.Imaging.Processors.RgbToGrayscaleConversion)">
            <summary>Erstellt und initialisiert eine neue Instanz.</summary>
        </member>
        <member name="M:SharpAccessory.Imaging.Processors.GrayscaleProcessor.Finalize">
            <summary>Gibt die Ressourcen des Prozessors frei.</summary>
        </member>
        <member name="M:SharpAccessory.Imaging.Processors.GrayscaleProcessor.GetPixels">
            <summary>Ruft alle Intensitäten als Array ab.</summary>
        </member>
        <member name="M:SharpAccessory.Imaging.Processors.GrayscaleProcessor.GetPixel(System.Int32,System.Int32)">
            <summary>Ruft die Intensität an der Position [x, y] ab.</summary>
        </member>
        <member name="M:SharpAccessory.Imaging.Processors.GrayscaleProcessor.SetPixels(System.UInt32[])">
            <summary>Ersetzt alle Intensitäten durch die im Array angegebenen Werte.</summary>
        </member>
        <member name="M:SharpAccessory.Imaging.Processors.GrayscaleProcessor.SetPixel(System.Int32,System.Int32,System.UInt32)">
            <summary>Setzt die Intensität an der Position [x, y].</summary>
        </member>
        <member name="M:SharpAccessory.Imaging.Processors.GrayscaleProcessor.Clone">
            <summary>Erzeugt eine Kopie des Prozessors und des zugrunde liegenden Bitmaps.</summary>
        </member>
        <member name="M:SharpAccessory.Imaging.Processors.GrayscaleProcessor.Dispose">
            <summary>Gibt den Prozessor frei.</summary>
        </member>
        <member name="P:SharpAccessory.Imaging.Processors.GrayscaleProcessor.Item(System.Int32,System.Int32)">
            <summary>Ruft die Intensität an der Position [x, y] ab, oder legt diese fest.</summary>
        </member>
        <member name="P:SharpAccessory.Imaging.Processors.GrayscaleProcessor.WriteBack">
            <summary>Ruft einen Wert ab, der angibt, ob Änderungen in das zugrunde liegende Bitmap 
            zurückgeschrieben werden, oder legt diesen fest. Default ist true.</summary>
        </member>
        <member name="P:SharpAccessory.Imaging.Processors.GrayscaleProcessor.Width">
            <summary>Ruft die Breite des Bildes ab.</summary>
        </member>
        <member name="P:SharpAccessory.Imaging.Processors.GrayscaleProcessor.Height">
            <summary>Ruft die Höhe des Bildes ab.</summary>
        </member>
        <member name="P:SharpAccessory.Imaging.Processors.GrayscaleProcessor.Scan0">
            <summary>Ruft die Adresse der ersten Bilddaten ab.</summary>
        </member>
        <member name="P:SharpAccessory.Imaging.Processors.GrayscaleProcessor.Bitmap">
            <summary>Ruft das zugrunde liegende Bitmap ab.</summary>
        </member>
        <member name="P:SharpAccessory.Imaging.Processors.GrayscaleProcessor.ReadOnly">
            <summary>Diese Eigenschaft ist für diese Klasse nicht relevant.</summary>
            <returns>false</returns>
        </member>
        <member name="P:SharpAccessory.Imaging.Processors.GrayscaleProcessor.IsDisposed">
            <summary>Ruft einen Wert ab, der angibt, ob dieser Prozessor bereits freigegeben wurde.</summary>
        </member>
        <member name="T:SharpAccessory.Imaging.Processors.RgbToGrayscaleConversion">
            <summary>Gibt an, wie RGB-Werte in Graustufen umwandelt werden.</summary>
        </member>
        <member name="F:SharpAccessory.Imaging.Processors.RgbToGrayscaleConversion.None">
            <summary>Gibt an, dass keine Konvertierung erfolgt.</summary>
        </member>
        <member name="F:SharpAccessory.Imaging.Processors.RgbToGrayscaleConversion.Mean">
            <summary>Gibt an, dass der Mittelwert der Farbkanäle gebildet wird.</summary>
        </member>
        <member name="F:SharpAccessory.Imaging.Processors.RgbToGrayscaleConversion.Weighted">
            <summary>Gibt an, dass die Farbkanäle mit 0.2989, 0.5870 und 0.1140 gewichtet werden.</summary>
        </member>
        <member name="F:SharpAccessory.Imaging.Processors.RgbToGrayscaleConversion.JustAlphas">
            <summary>Gibt an, dass nur der Alpha-Kanal verwendet wird.</summary>
        </member>
        <member name="F:SharpAccessory.Imaging.Processors.RgbToGrayscaleConversion.JustReds">
            <summary>Gibt an, dass nur der Rot-Kanal verwendet wird.</summary>
        </member>
        <member name="F:SharpAccessory.Imaging.Processors.RgbToGrayscaleConversion.JustGreens">
            <summary>Gibt an, dass nur der Grün-Kanal verwendet wird.</summary>
        </member>
        <member name="F:SharpAccessory.Imaging.Processors.RgbToGrayscaleConversion.JustBlues">
            <summary>Gibt an, dass nur der Blau-Kanal verwendet wird.</summary>
        </member>
        <member name="T:SharpAccessory.Imaging.Segmentation.CorrespondingEllipse">
            <summary>Repräsentiert die beschreibende Ellipse einer Kontur. Original Paper: Hufnagl P, Schlosser 
            A, Voss K. Merkmale der Form, Größe und Lage digitaler Objekte. Bild und Ton. 1984:37, 293-298.
            </summary>
        </member>
        <member name="M:SharpAccessory.Imaging.Segmentation.CorrespondingEllipse.#ctor(System.Single,System.Single,System.Single)">
            <summary>Erstellt und initialisiert eine neue Instanz.</summary>
            <param name="majorAxis">Gibt die Länge der Hauptachse an.</param>
            <param name="minorAxis">Gibt die Länge der Nebenachse an.</param>
            <param name="angle">Gibt den Winkel der Ellipse zur X-Achse an. Der Winkel wird im Bogenmaß 
            angegeben und verläuft im Uhrzeigersinn.</param>
        </member>
        <member name="M:SharpAccessory.Imaging.Segmentation.CorrespondingEllipse.FromContour(SharpAccessory.Imaging.Segmentation.Contour)">
            <summary>Berechnet die beschreibende Ellipse der angegebenen Kontur.</summary>
        </member>
        <member name="M:SharpAccessory.Imaging.Segmentation.CorrespondingEllipse.ToString">
            <summary>Konvertiert diese Instanz in eine lesbare Zeichenfolge.</summary>
        </member>
        <member name="P:SharpAccessory.Imaging.Segmentation.CorrespondingEllipse.MajorAxis">
            <summary>Ruft die Länge der Hauptachse ab, oder legt diese fest.</summary>
        </member>
        <member name="P:SharpAccessory.Imaging.Segmentation.CorrespondingEllipse.MinorAxis">
            <summary>Ruft die Länge der Nebenachse ab, oder legt diese fest.</summary>
        </member>
        <member name="P:SharpAccessory.Imaging.Segmentation.CorrespondingEllipse.Angle">
            <summary>Ruft den Winkel der Ellipse zur X-Achse ab, oder legt diesen fest. Der Winkel wird im 
            Bogenmaß angegeben und verläuft im Uhrzeigersinn.</summary>
        </member>
        <member name="P:SharpAccessory.Imaging.Segmentation.CorrespondingEllipse.AspectRatio">
            <summary>Ruft das Durchmesserverhältnis der Ellipse mit MinorAxis/MajorAxis ab.</summary>
        </member>
        <member name="P:SharpAccessory.Imaging.Segmentation.CorrespondingEllipse.IsEmpty">
            <summary>Ruft einen Wert ab, der angibt, ob alle Werte auf 0 gesetzt sind.</summary>
        </member>
        <member name="P:SharpAccessory.Imaging.Segmentation.CorrespondingEllipse.Empty">
            <summary>Erzeugt eine neue Instanz mit allen Werten auf 0 gesetzt.</summary>
        </member>
        <member name="T:SharpAccessory.Imaging.Segmentation.ChessboardSegmentation">
            <summary>Erzeugt eine schachbrettförmige Segmentierung.</summary>
        </member>
        <member name="M:SharpAccessory.Imaging.Segmentation.ChessboardSegmentation.Execute(System.Drawing.Size,System.Drawing.Size)">
            <summary>Führt die Segmentierung aus.</summary>
            <param name="imageSize">Gibt die Größe des Bildes an.</param>
            <param name="tileSize">Gibt die Größe der Schachbrettfelder an.</param>
        </member>
        <member name="T:SharpAccessory.Imaging.Segmentation.ConcaveContourPoint">
            <summary>Repräsentiert einen Punkt aus einem konkaven Abschnitt einer Kontur. Original Paper: 
            Wienert, S. et al. Detection and Segmentation of Cell Nuclei in Virtual Microscopy Images: A 
            Minimum-Model Approach. Sci. Rep. 2, 503; DOI:10.1038/srep00503 (2012).</summary>
        </member>
        <member name="M:SharpAccessory.Imaging.Segmentation.ConcaveContourPoint.#ctor(SharpAccessory.Imaging.Segmentation.ConcaveContourSegment,System.Int32,System.Int32,System.Int32,System.Double)">
            <summary>Erstellt und initialisiert eine neue Instanz.</summary>
            <param name="segment">Gibt den Konturabschnitt an, zu dem dieser Punkt gehört.</param>
            <param name="index">Gibt den Index des Punktes innerhalb der Kontur an.</param>
            <param name="x">Gibt die X-Koordinate des Punktes an.</param>
            <param name="y">Gibt die Y-Koordinate des Punktes an.</param>
            <param name="depth">Gibt die Tiefe des Punktes in dem entsprechenden Segment an.</param>
        </member>
        <member name="M:SharpAccessory.Imaging.Segmentation.ConcaveContourPoint.FindAll(SharpAccessory.Imaging.Segmentation.Contour)">
            <summary>Ruft die Liste aller konkav liegenden Punkte der angegebenen Kontur ab.</summary>
        </member>
        <member name="M:SharpAccessory.Imaging.Segmentation.ConcaveContourPoint.ToPoint">
            <summary>Konvertiert diese Instanz in ein System.Drawing.Point.</summary>
        </member>
        <member name="M:SharpAccessory.Imaging.Segmentation.ConcaveContourPoint.ToString">
            <summary>Konvertiert diese Instanz in eine lesbare Zeichenfolge.</summary>
        </member>
        <member name="P:SharpAccessory.Imaging.Segmentation.ConcaveContourPoint.Segment">
            <summary>Ruft den Konturabschnitt ab, zu dem dieser Punkt gehört.</summary>
        </member>
        <member name="P:SharpAccessory.Imaging.Segmentation.ConcaveContourPoint.Index">
            <summary>Ruft den Index des Punktes innerhalb der Kontur ab.</summary>
        </member>
        <member name="P:SharpAccessory.Imaging.Segmentation.ConcaveContourPoint.X">
            <summary>Ruft die X-Koordinate des Punktes ab.</summary>
        </member>
        <member name="P:SharpAccessory.Imaging.Segmentation.ConcaveContourPoint.Y">
            <summary>Ruft die Y-Koordinate des Punktes ab.</summary>
        </member>
        <member name="P:SharpAccessory.Imaging.Segmentation.ConcaveContourPoint.Depth">
            <summary>Ruft die Tiefe des Punktes in dem entsprechenden Segment ab.</summary>
        </member>
        <member name="T:SharpAccessory.Imaging.Segmentation.ConcaveContourSegment">
            <summary>Repräsentiert einen konkaven Abschnitt einer Kontur. Original Paper: Wienert, S. et al. 
            Detection and Segmentation of Cell Nuclei in Virtual Microscopy Images: A Minimum-Model Approach. 
            Sci. Rep. 2, 503; DOI:10.1038/srep00503 (2012).</summary>
        </member>
        <member name="M:SharpAccessory.Imaging.Segmentation.ConcaveContourSegment.#ctor(SharpAccessory.Imaging.Segmentation.Contour,System.Int32,System.Int32,System.Int32,System.Double,System.Double)">
            <summary>Erstellt und initialisiert eine neue Instanz.</summary>
            <param name="contour">Gibt die Kontur an, zu der dieser Konturabschnitt gehört.</param>
            <param name="start">Gibt den Start-Index des Konturabschnitts an.</param>
            <param name="end">Gibt den End-Index des Konturabschnitts an.</param>
            <param name="center">Gibt den Index des Punktes mit der größten Tiefe an.</param>
            <param name="depth">Gibt die Tiefe des Einschnitts an.</param>
            <param name="angle">Gibt den Winkel des Einschnitts an.</param>
        </member>
        <member name="M:SharpAccessory.Imaging.Segmentation.ConcaveContourSegment.FindAll(SharpAccessory.Imaging.Segmentation.Contour)">
            <summary>Findet alle konkaven Abschnitte der angegebenen Kontur.</summary>
        </member>
        <member name="M:SharpAccessory.Imaging.Segmentation.ConcaveContourSegment.GetPoints">
            <summary>Ruft die Liste der Konturpunkte ab, die in dem Konturabschnitts enthalten sind.</summary>
        </member>
        <member name="M:SharpAccessory.Imaging.Segmentation.ConcaveContourSegment.ToString">
            <summary>Konvertiert diese Instanz in eine lesbare Zeichenfolge.</summary>
        </member>
        <member name="P:SharpAccessory.Imaging.Segmentation.ConcaveContourSegment.Contour">
            <summary>Ruft die Kontur ab, zu der dieser Konturabschnitt gehört.</summary>
        </member>
        <member name="P:SharpAccessory.Imaging.Segmentation.ConcaveContourSegment.Start">
            <summary>Ruft den Start-Index des Konturabschnitts ab.</summary>
        </member>
        <member name="P:SharpAccessory.Imaging.Segmentation.ConcaveContourSegment.End">
            <summary>Ruft den End-Index des Konturabschnitts ab.</summary>
        </member>
        <member name="P:SharpAccessory.Imaging.Segmentation.ConcaveContourSegment.Center">
            <summary>Ruft den Index des Punktes mit der größten Tiefe ab.</summary>
        </member>
        <member name="P:SharpAccessory.Imaging.Segmentation.ConcaveContourSegment.Depth">
            <summary>Ruft die Tiefe des Einschnitts ab.</summary>
        </member>
        <member name="P:SharpAccessory.Imaging.Segmentation.ConcaveContourSegment.Angle">
            <summary>Ruft den Winkel des Einschnitts ab.</summary>
            <returns>Den Winkel im Uhrzeigersinn zur X-Achse im Bogenmaß mit -π≤α≤π.</returns>
        </member>
        <member name="T:SharpAccessory.Imaging.Segmentation.ConnectedComponentCollector">
            <summary>Bildet aus zusammenhängenden Segmenten eine Objektebene.</summary>
        </member>
        <member name="M:SharpAccessory.Imaging.Segmentation.ConnectedComponentCollector.Execute(SharpAccessory.Imaging.Segmentation.IMap)">
            <summary>Erzeugt aus zusammenhängenden Segmenten eine Objektebene.</summary>
            <param name="map">Enthält die Label (>0) der zusammenhängenden Segmente.</param>
        </member>
        <member name="T:SharpAccessory.Imaging.Segmentation.Contour">
            <summary>Repräsentiert die Kontur eines Objektes.</summary>
        </member>
        <member name="M:SharpAccessory.Imaging.Segmentation.Contour.#ctor(System.Drawing.Point[])">
            <summary>Erstellt und initialisiert eine neue Instanz.</summary>
            <param name="points">Enthält die Konturpunkte.</param>
        </member>
        <member name="M:SharpAccessory.Imaging.Segmentation.Contour.FindBoundingBox">
            <summary>Berechnet die achsenparallele Bounding-Box der Kontur.</summary>
        </member>
        <member name="M:SharpAccessory.Imaging.Segmentation.Contour.GetChainCode">
            <summary>Ruft den Kettencode der Kontur ab. Für jeden Konturpunkt wird die Freeman-Richtung in 
            der er verlassen wurde angegeben. Ist die Kontur leer wird ein leeres Array zurückgegeben. 
            Ansonsten hat das zurückgegebene Array die Länge der Kontur minus eins.</summary>
        </member>
        <member name="M:SharpAccessory.Imaging.Segmentation.Contour.GetFreemanPoints">
            <summary>Ruft die Freeman codierten Punkte der Kontur ab. Ist die Kontur leer wird ein leeres 
            Array zurückgegeben. Ansonsten hat das zurückgegebene Array die Länge der Kontur minus eins.
            </summary>
        </member>
        <member name="M:SharpAccessory.Imaging.Segmentation.Contour.GetPoints">
            <summary>Kopiert alle Punkte der Kontur in ein neues Array.</summary>
        </member>
        <member name="M:SharpAccessory.Imaging.Segmentation.Contour.Contains(System.Drawing.Point)">
            <summary>Überprüft ob der angegebene Punkt auf der Kontur liegt.</summary>
            <returns>True, wenn der Punkt auf der Kontur liegt, sonst false.</returns>
        </member>
        <member name="M:SharpAccessory.Imaging.Segmentation.Contour.Contains(System.Int32,System.Int32)">
            <summary>Überprüft ob der angegebene Punkt auf der Kontur liegt.</summary>
            <returns>True, wenn der Punkt auf der Kontur liegt, sonst false.</returns>
        </member>
        <member name="M:SharpAccessory.Imaging.Segmentation.Contour.Fill(SharpAccessory.Imaging.Segmentation.IMap,System.UInt32,System.Boolean)">
            <summary>Füllt die von der angegebenen Kontur eingeschlossene Fläche.</summary>
            <param name="map">Die Map in der die eingeschlossen Fläche markiert wird.</param>
            <param name="id">Die ID mit der die eingeschlossene Fläche markiert wird.</param>
            <param name="overwrite">Gibt an ob Einträge ungleich 0 überschrieben werden.</param>
            <returns>Die Anzahl der markierten Pixel.</returns>
        </member>
        <member name="P:SharpAccessory.Imaging.Segmentation.Contour.Item(System.Int32)">
            <summary>Ruft den Konturpunkt an dem angegebenen Index ab.</summary>
        </member>
        <member name="P:SharpAccessory.Imaging.Segmentation.Contour.Length">
            <summary>Ruft einen Wert ab, der angibt, wieviele Punkte in der Kontur enthalten sind.</summary>
        </member>
        <member name="P:SharpAccessory.Imaging.Segmentation.Contour.IsEmpty">
            <summary>Ruft einen Wert ab, der angibt, ob diese Kontur leer ist.</summary>
        </member>
        <member name="P:SharpAccessory.Imaging.Segmentation.Contour.Empty">
            <summary>Erzeugt eine leere Kontur.</summary>
        </member>
        <member name="T:SharpAccessory.Imaging.Segmentation.ContourBasedSegmentation">
            <summary>Findet Segmente in Graustufenbildern. Original Paper: Wienert, S. et al. Detection and 
            Segmentation of Cell Nuclei in Virtual Microscopy Images: A Minimum-Model Approach. Sci. Rep. 2, 503; 
            DOI:10.1038/srep00503 (2012).</summary>
        </member>
        <member name="M:SharpAccessory.Imaging.Segmentation.ContourBasedSegmentation.#ctor">
            <summary>Erstellt und initialisiert eine neue Instanz.</summary>
        </member>
        <member name="M:SharpAccessory.Imaging.Segmentation.ContourBasedSegmentation.CreatePrimarySegmentation(SharpAccessory.Imaging.Processors.GrayscaleProcessor)">
            <summary>Fügt Konturen zur Primär-Segmentierung hinzu.</summary>
            <param name="p">Bietet Zugriff auf die Bilddaten.</param>
        </member>
        <member name="M:SharpAccessory.Imaging.Segmentation.ContourBasedSegmentation.CreatePrimarySegmentation(SharpAccessory.Imaging.Processors.GrayscaleProcessor,System.Int32)">
            <summary>Fügt Konturen zur Primär-Segmentierung hinzu.</summary>
            <param name="p">Bietet Zugriff auf die Bilddaten.</param>
            <param name="maxContourLength">Gibt die maximal zulässige Konturlänge an.</param>
        </member>
        <member name="M:SharpAccessory.Imaging.Segmentation.ContourBasedSegmentation.CreatePrimarySegmentation(SharpAccessory.Imaging.Processors.GrayscaleProcessor,System.Int32,System.Boolean)">
            <summary>Fügt Konturen zur Primär-Segmentierung hinzu.</summary>
            <param name="p">Bietet Zugriff auf die Bilddaten.</param>
            <param name="maxContourLength">Gibt die maximal zulässige Konturlänge an.</param>
            <param name="useMinMax">Gibt an, ob das tatsächliche Minimum bzw. Maximum verwendet wird.</param>
        </member>
        <member name="M:SharpAccessory.Imaging.Segmentation.ContourBasedSegmentation.EvaluateContours(SharpAccessory.Imaging.Processors.GrayscaleProcessor)">
            <summary>Bewertet die Konturen der Primär-Segmentierung.</summary>
            <param name="gradientImage">Bietet Zugriff auf die Bilddaten des Gradientenbildes.</param>
        </member>
        <member name="M:SharpAccessory.Imaging.Segmentation.ContourBasedSegmentation.EvaluateContours(SharpAccessory.Imaging.Segmentation.ContourBasedSegmentation.Evaluation)">
            <summary>Bewertet die Konturen der Primär-Segmentierung.</summary>
            <param name="evaluation">Methode die eine Kontur bewertet.</param>
        </member>
        <member name="M:SharpAccessory.Imaging.Segmentation.ContourBasedSegmentation.EvaluateContours(SharpAccessory.Imaging.Segmentation.ContourBasedSegmentation.EvaluationEx)">
            <summary>Bewertet die Konturen der Primär-Segmentierung.</summary>
            <param name="evaluation">Methode die eine Kontur bewertet.</param>
        </member>
        <member name="M:SharpAccessory.Imaging.Segmentation.ContourBasedSegmentation.CreateLayer">
            <summary>Erzeugt eine Objektebene aus der Primär-Segmentierung.</summary>
        </member>
        <member name="M:SharpAccessory.Imaging.Segmentation.ContourBasedSegmentation.CreateLayer(System.Int32,System.Int32)">
            <summary>Erzeugt eine Objektebene aus der Primär-Segmentierung.</summary>
            <param name="minContourLength">Gibt die untere Grenze der zulässigen Konturlänge an.</param>
            <param name="maxContourLength">Gibt die obere Grenze der zulässigen Konturlänge an.</param>
        </member>
        <member name="M:SharpAccessory.Imaging.Segmentation.ContourBasedSegmentation.GetContours">
            <summary>Ruft alle Konturen der Primär-Segmentierung ab deren Wert größer 0 ist.</summary>
        </member>
        <member name="P:SharpAccessory.Imaging.Segmentation.ContourBasedSegmentation.PrimarySegmentation">
            <summary>Ruft die Liste der Konturdaten aus der Primär-Segmentierung ab.</summary>
        </member>
        <member name="T:SharpAccessory.Imaging.Segmentation.ContourBasedSegmentation.ContourData">
            <summary>Enthält eine Kontur und die dazugehörigen Daten.</summary>
        </member>
        <member name="M:SharpAccessory.Imaging.Segmentation.ContourBasedSegmentation.ContourData.#ctor(SharpAccessory.Imaging.Segmentation.Contour,SharpAccessory.Imaging.Segmentation.µMap,SharpAccessory.Imaging.Processors.GrayscaleProcessor)">
            <summary>Erstellt und initialisiert eine neue Instanz.</summary>
            <param name="contour">Gibt die Kontur an.</param>
            <param name="map">Die Map in der die Konturfläche mit 1 markiert ist.</param>
            <param name="processor">Die Bilddaten in denen die Kontur gefunden wurde.</param>
        </member>
        <member name="P:SharpAccessory.Imaging.Segmentation.ContourBasedSegmentation.ContourData.Value">
            <summary>Ruft den Wert der Kontur ab oder legt diesen fest.</summary>
        </member>
        <member name="P:SharpAccessory.Imaging.Segmentation.ContourBasedSegmentation.ContourData.Contour">
            <summary>Ruft die Kontur ab.</summary>
        </member>
        <member name="P:SharpAccessory.Imaging.Segmentation.ContourBasedSegmentation.ContourData.Map">
            <summary>Ruft die Map ab in der die Konturfläche mit 1 markiert ist.</summary>
        </member>
        <member name="P:SharpAccessory.Imaging.Segmentation.ContourBasedSegmentation.ContourData.Processor">
            <summary>Die Bilddaten in denen die Kontur gefunden wurde.</summary>
        </member>
        <member name="T:SharpAccessory.Imaging.Segmentation.ContourBasedSegmentation.ContourDataCollection">
            <summary>Verwaltet eine Liste von Konturdaten.</summary>
        </member>
        <member name="T:SharpAccessory.Imaging.Segmentation.ContourBasedSegmentation.Evaluation">
            <summary>Methode die eine Kontur bewertet.</summary>
            <param name="contour">Die Kontur die bewertet wird.</param>
            <returns>Den Wert der Kontur bzw. ≤0 für ungültig.</returns>
        </member>
        <member name="T:SharpAccessory.Imaging.Segmentation.ContourBasedSegmentation.EvaluationEx">
            <summary>Methode die eine Kontur bewertet.</summary>
            <param name="data">Die Kontur die bewertet wird sowie dazugehörige Daten.</param>
            <returns>Den Wert der Kontur bzw. ≤0 für ungültig.</returns>
        </member>
        <member name="T:SharpAccessory.Imaging.Segmentation.ContourDataComposite`1">
            <summary>Fasst eine Kontur und einen weiteren Parameter zusammen.</summary>
        </member>
        <member name="M:SharpAccessory.Imaging.Segmentation.ContourDataComposite`1.#ctor">
            <summary>Erstellt und initialisiert eine neue Instanz.</summary>
        </member>
        <member name="M:SharpAccessory.Imaging.Segmentation.ContourDataComposite`1.#ctor(SharpAccessory.Imaging.Segmentation.Contour)">
            <summary>Erstellt und initialisiert eine neue Instanz.</summary>
            <param name="contour">Gibt die Kontur an.</param>
        </member>
        <member name="M:SharpAccessory.Imaging.Segmentation.ContourDataComposite`1.#ctor(SharpAccessory.Imaging.Segmentation.Contour,`0)">
            <summary>Erstellt und initialisiert eine neue Instanz.</summary>
            <param name="contour">Gibt die Kontur an.</param>
            <param name="data">Gibt die zur Kontur gehörenden Daten an.</param>
        </member>
        <member name="P:SharpAccessory.Imaging.Segmentation.ContourDataComposite`1.Contour">
            <summary>Ruft die Kontur ab, oder legt diese fest.</summary>
        </member>
        <member name="P:SharpAccessory.Imaging.Segmentation.ContourDataComposite`1.Data">
            <summary>Ruft die zur Kontur gehörenden Daten ab, oder legt diese fest.</summary>
        </member>
        <member name="T:SharpAccessory.Imaging.Segmentation.ContourOptimizer">
            <summary>Entfernt nicht-kompakt liegende Pixel am Rand von Objekten. Original Paper: Wienert, S. et 
            al. Detection and Segmentation of Cell Nuclei in Virtual Microscopy Images: A Minimum-Model Approach. 
            Sci. Rep. 2, 503; DOI:10.1038/srep00503 (2012).</summary>
        </member>
        <member name="M:SharpAccessory.Imaging.Segmentation.ContourOptimizer.RemoveNonCompactPixels(SharpAccessory.Imaging.Segmentation.ObjectLayer,System.Int32)">
            <summary>Entfernt nicht-kompakt liegende Pixel am Rand von Objekten.</summary>
            <param name="layer">Die Objektebene die bearbeitet wird.</param>
            <param name="distance">Die Distanz ab der die Kompaktheit untersucht wird.</param>
        </member>
        <member name="M:SharpAccessory.Imaging.Segmentation.ContourOptimizer.RemoveNonCompactPixels(SharpAccessory.Imaging.Segmentation.IMap,System.Int32)">
            <summary>Entfernt nicht-kompakt liegende Pixel am Rand von Objekten.</summary>
            <param name="map">Die Map die bearbeitet wird.</param>
            <param name="distance">Die Distanz ab der die Kompaktheit untersucht wird.</param>
        </member>
        <member name="T:SharpAccessory.Imaging.Segmentation.ContourProperties">
            <summary>Berechnet Merkmale einer Kontur. Original Paper: Hufnagl P, Schlosser A, Voss K. Merkmale 
            der Form, Größe und Lage digitaler Objekte. Bild und Ton. 1984:37, 293-298.</summary>
        </member>
        <member name="M:SharpAccessory.Imaging.Segmentation.ContourProperties.#ctor(System.Single,System.Single,System.Single)">
            <summary>Erstellt und initialisiert eine neue Instanz.</summary>
            <param name="area">Gibt die geometrische Fläche der Kontur an.</param>
            <param name="length">Gibt die geometrische Länge der Kontur an.</param>
            <param name="convexity">Gibt das Semikonvexitätsmaß der Kontur an. Zulässige Werte liegen 
            zwischen 0 und 1. Konvexe Konturen haben das Semikonvexitätsmaß=1.</param>
        </member>
        <member name="M:SharpAccessory.Imaging.Segmentation.ContourProperties.FromContour(SharpAccessory.Imaging.Segmentation.Contour)">
            <summary>Berechnet die Merkmale der angegebenen Kontur.</summary>
        </member>
        <member name="M:SharpAccessory.Imaging.Segmentation.ContourProperties.ToString">
            <summary>Konvertiert diese Instanz in eine lesbare Zeichenfolge.</summary>
        </member>
        <member name="P:SharpAccessory.Imaging.Segmentation.ContourProperties.Area">
            <summary>Ruft die geometrische Fläche der Kontur ab, oder legt diese fest.</summary>
        </member>
        <member name="P:SharpAccessory.Imaging.Segmentation.ContourProperties.Length">
            <summary>Ruft die geometrische Länge der Kontur ab, oder legt diese fest.</summary>
        </member>
        <member name="P:SharpAccessory.Imaging.Segmentation.ContourProperties.Convexity">
            <summary>Ruft das Semikonvexitätsmaß der Kontur ab, oder legt dieses fest. Zulässige Werte liegen 
            zwischen 0 und 1. Konvexe Konturen haben das Semikonvexitätsmaß=1.</summary>
        </member>
        <member name="P:SharpAccessory.Imaging.Segmentation.ContourProperties.FormFactor">
            <summary>Ruft den Form-Faktor der Kontur mit Length²/Area ab.</summary>
        </member>
        <member name="P:SharpAccessory.Imaging.Segmentation.ContourProperties.IsEmpty">
            <summary>Ruft einen Wert ab, der angibt, ob alle Werte auf 0 gesetzt sind.</summary>
        </member>
        <member name="P:SharpAccessory.Imaging.Segmentation.ContourProperties.Empty">
            <summary>Erzeugt eine neue Instanz mit allen Werten auf 0 gesetzt.</summary>
        </member>
        <member name="T:SharpAccessory.Imaging.Segmentation.ContourTracing">
            <summary>Findet die Kontur(en) von Objekten.</summary>
        </member>
        <member name="M:SharpAccessory.Imaging.Segmentation.ContourTracing.Execute(System.Drawing.Point,System.Int32,System.Predicate{System.Drawing.Point})">
            <summary>Verfolgt die Kontur, die von dem angegebenen Saatpunkt ausgeht.</summary>
            <param name="seed">Gibt den Konturstartpunkt am linken Rand des Objekts an.</param>
            <param name="maxLength">Gibt die maximal zulässige Anzahl der Konturpunkte an.</param>
            <param name="predicate">Überprüft, ob ein Testpunkt zur Kontur gehört.</param>
        </member>
        <member name="M:SharpAccessory.Imaging.Segmentation.ContourTracing.Execute(SharpAccessory.Imaging.Segmentation.ObjectLayer)">
            <summary>Findet die Konturen aller Objekte und erzeugt eine neue Objektebene.</summary>
        </member>
        <member name="M:SharpAccessory.Imaging.Segmentation.ContourTracing.GetTestPoints(SharpAccessory.Imaging.Segmentation.Contour)">
            <summary>Ruft die Testpunkte der angegebenen Kontur ab.</summary>
        </member>
        <member name="T:SharpAccessory.Imaging.Segmentation.ConvexHull">
            <summary>Berechnet das konvexe Hüll-Polygon einer Punktmenge. Original Paper: Eddy WF. A New Convex 
            Hull Algorithm for Planar Sets. ACM Transactions on Mathematical Software. 1977:3(4), 393-403.
            </summary>
        </member>
        <member name="M:SharpAccessory.Imaging.Segmentation.ConvexHull.#ctor(System.Drawing.Point[])">
            <summary>Erstellt und initialisiert eine neue Instanz.</summary>
            <param name="vertices">Enthält die Eckpunkte des konvexen Hüll-Polygons.</param>
        </member>
        <member name="M:SharpAccessory.Imaging.Segmentation.ConvexHull.FromContour(SharpAccessory.Imaging.Segmentation.Contour)">
            <summary>Berechnet das konvexe Hüll-Polygon aus der angegebenen Kontur.</summary>
        </member>
        <member name="M:SharpAccessory.Imaging.Segmentation.ConvexHull.FromPointSet(System.Drawing.Point[])">
            <summary>Berechnet das konvexe Hüll-Polygon aus der angegebenen Punktmenge.</summary>
        </member>
        <member name="M:SharpAccessory.Imaging.Segmentation.ConvexHull.Contains(System.Drawing.Point)">
            <summary>Überprüft, ob der angegebene Punkt ein Eckpunkt des konvexen Hüll-Polygons ist.</summary>
            <returns>True, wenn der Punkt Eckpunkt des konvexen Hüll-Polygons ist, sonst false.</returns>
        </member>
        <member name="M:SharpAccessory.Imaging.Segmentation.ConvexHull.Contains(System.Int32,System.Int32)">
            <summary>Überprüft, ob der angegebene Punkt ein Eckpunkt des konvexen Hüll-Polygons ist.</summary>
            <returns>True, wenn der Punkt Eckpunkt des konvexen Hüll-Polygons ist, sonst false.</returns>
        </member>
        <member name="M:SharpAccessory.Imaging.Segmentation.ConvexHull.FindBoundingBox">
            <summary>Berechnet die achsenparallele Bounding-Box des konvexen Hüll-Polygons.</summary>
        </member>
        <member name="M:SharpAccessory.Imaging.Segmentation.ConvexHull.GetVertices">
            <summary>Kopiert alle Eckpunkte des Hüll-Polygons in ein neues Array.</summary>
        </member>
        <member name="P:SharpAccessory.Imaging.Segmentation.ConvexHull.Item(System.Int32)">
            <summary>Ruft den Eckpunkt an dem angegebenen Index ab.</summary>
        </member>
        <member name="P:SharpAccessory.Imaging.Segmentation.ConvexHull.Length">
            <summary>Ruft die Anzahl der Eckpunkte des konvexen Hüll-Polygons ab.</summary>
        </member>
        <member name="P:SharpAccessory.Imaging.Segmentation.ConvexHull.IsEmpty">
            <summary>Ruft einen Wert ab, der angibt, ob das konvexe Hüll-Polygon leer ist.</summary>
        </member>
        <member name="P:SharpAccessory.Imaging.Segmentation.ConvexHull.Empty">
            <summary>Erzeugt ein leeres Hüll-Polygon.</summary>
        </member>
        <member name="T:SharpAccessory.Imaging.Segmentation.ConvexHullProperties">
            <summary>Berechnet Merkmale eines konvexen Hüll-Polygons.</summary>
        </member>
        <member name="M:SharpAccessory.Imaging.Segmentation.ConvexHullProperties.#ctor(System.Single,System.Single)">
            <summary>Erstellt und initialisiert eine neue Instanz.</summary>
            <param name="area">Gibt den Flächeninhalt des konvexen Hüll-Polygons an.</param>
            <param name="length">Gibt den Umfang des konvexen Hüll-Polygons an.</param>
        </member>
        <member name="M:SharpAccessory.Imaging.Segmentation.ConvexHullProperties.FromConvexHull(SharpAccessory.Imaging.Segmentation.ConvexHull)">
            <summary>Berechnet die Merkmale des angegebenen konvexen Hüll-Polygons.</summary>
        </member>
        <member name="M:SharpAccessory.Imaging.Segmentation.ConvexHullProperties.ToString">
            <summary>Konvertiert diese Instanz in eine lesbare Zeichenfolge.</summary>
        </member>
        <member name="P:SharpAccessory.Imaging.Segmentation.ConvexHullProperties.Area">
            <summary>Ruft den Flächeninhalt des konvexen Hüll-Polygons ab, oder legt diesen fest.</summary>
        </member>
        <member name="P:SharpAccessory.Imaging.Segmentation.ConvexHullProperties.Length">
            <summary>Ruft den Umfang des konvexen Hüll-Polygons ab, oder legt diesen fest.</summary>
        </member>
        <member name="P:SharpAccessory.Imaging.Segmentation.ConvexHullProperties.FormFactor">
            <summary>Ruft den Form-Faktor des konvexen Hüll-Polygons mit Length²/Area ab.</summary>
        </member>
        <member name="P:SharpAccessory.Imaging.Segmentation.ConvexHullProperties.IsEmpty">
            <summary>Ruft einen Wert ab, der angibt, ob alle Werte auf 0 gesetzt sind.</summary>
        </member>
        <member name="P:SharpAccessory.Imaging.Segmentation.ConvexHullProperties.Empty">
            <summary>Erzeugt eine neue Instanz mit allen Werten auf 0 gesetzt.</summary>
        </member>
        <member name="T:SharpAccessory.Imaging.Segmentation.ConcaveObjectSeparation">
            <summary>Trennt konkave Objekte. Original Paper: Wienert, S. et al. Detection and Segmentation of 
            Cell Nuclei in Virtual Microscopy Images: A Minimum-Model Approach. Sci. Rep. 2, 503; 
            DOI:10.1038/srep00503 (2012).</summary>
        </member>
        <member name="M:SharpAccessory.Imaging.Segmentation.ConcaveObjectSeparation.Execute(SharpAccessory.Imaging.Segmentation.ObjectLayer,System.Double,System.Double,System.Boolean)">
            <summary>Führt die Trennung der konkaven Objekte durch.</summary>
            <param name="layer">Gibt die Objektebene an die verarbeitet werden soll.</param>
            <param name="minDepthRel">Gibt das erforderliche minimale Verhältnis der Tiefe des Start bzw. 
            Endpunktes einer Trennlinie in dem entsprechenden konkaven Konturabschnitt zur Objektgröße 
            (MaximumDistanceToBorder) an. Gültige Werte liegen zwischen 0 und 1.</param>
            <param name="minDepthAbs">Gibt die minimale absolute Einschnittstiefe an.</param>
            <param name="recursive">Gibt an, ob die Trennung rekursiv ausgeführt werden soll.</param>
        </member>
        <member name="T:SharpAccessory.Imaging.Segmentation.Eccentricity">
            <summary>Bestimmt die Exzentrizität eines Objekts innerhalb der dazugehörigen Voronoizelle.</summary>
        </member>
        <member name="M:SharpAccessory.Imaging.Segmentation.Eccentricity.#ctor(System.Double,System.Double,System.Double,System.Double)">
            <summary>Erstellt und initialisiert eine neue Instanz.</summary>
            <param name="angle">Gibt den Winkel der Exzentrizität an.</param>
            <param name="diameter">Gibt den Durchmesser durch das Objekt an.</param>
            <param name="smallGap">Gibt den kleineren Abstand zur Voronoi-Grenze an.</param>
            <param name="largeGap">Gibt den größeren Abstand zur Voronoi-Grenze an.</param>
        </member>
        <member name="M:SharpAccessory.Imaging.Segmentation.Eccentricity.Find(SharpAccessory.Imaging.Segmentation.ImageObject,SharpAccessory.Imaging.Segmentation.ImageObject)">
            <summary>Bestimmt die Exzentrizität des angegebenen Objekts.</summary>
            <param name="imageObject">Das Objekt dessen Exzentrizität bestimmt wird.</param>
            <param name="tesselationObject">Die dazugehörige Voronoizelle.</param>
        </member>
        <member name="M:SharpAccessory.Imaging.Segmentation.Eccentricity.ToString">
            <summary>Konvertiert diese Instanz in eine lesbare Zeichenfolge.</summary>
        </member>
        <member name="P:SharpAccessory.Imaging.Segmentation.Eccentricity.Angle">
            <summary>Ruft den Winkel der Exzentrizität ab, oder legt diesen fest.</summary>
        </member>
        <member name="P:SharpAccessory.Imaging.Segmentation.Eccentricity.Diameter">
            <summary>Ruft den Durchmesser durch das Objekt ab, oder legt diesen fest.</summary>
        </member>
        <member name="P:SharpAccessory.Imaging.Segmentation.Eccentricity.SmallGap">
            <summary>Ruft den kleineren Abstand zur Voronoi-Grenze ab, oder legt diesen fest.</summary>
        </member>
        <member name="P:SharpAccessory.Imaging.Segmentation.Eccentricity.LargeGap">
            <summary>Ruft den größeren Abstand zur Voronoi-Grenze ab, oder legt diesen fest.</summary>
        </member>
        <member name="P:SharpAccessory.Imaging.Segmentation.Eccentricity.Significance">
            <summary>Ruft die Signifikanz der Exzentrizität ab.</summary>
        </member>
        <member name="P:SharpAccessory.Imaging.Segmentation.Eccentricity.IsEmpty">
            <summary>Ruft einen Wert ab, der angibt, ob alle Werte auf 0 gesetzt sind.</summary>
        </member>
        <member name="P:SharpAccessory.Imaging.Segmentation.Eccentricity.Empty">
            <summary>Erzeugt eine neue Instanz mit allen Werten auf 0 gesetzt.</summary>
        </member>
        <member name="T:SharpAccessory.Imaging.Segmentation.FreemanPoint">
            <summary>Repräsentiert einen Konturpunkt mit seinen Koordinaten und Freemancodes.</summary>
        </member>
        <member name="M:SharpAccessory.Imaging.Segmentation.FreemanPoint.#ctor(System.Drawing.Point,System.Int32,System.Int32)">
            <summary>Erstellt und initialisiert eine neue Instanz.</summary>
            <param name="p">Gibt die Position des Konturpunkts an.</param>
            <param name="freemanIn">Gibt den Freemancode an mit dem der Konturpunkt betreten wurde.</param>
            <param name="freemanOut">Gibt den Freemancode an mit dem der Konturpunkt verlassen wurde.</param>
        </member>
        <member name="M:SharpAccessory.Imaging.Segmentation.FreemanPoint.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>Erstellt und initialisiert eine neue Instanz.</summary>
            <param name="x">Gibt die X-Koordinate des Konturpunkts an.</param>
            <param name="y">Gibt die Y-Koordinate des Konturpunkts an.</param>
            <param name="freemanIn">Gibt den Freemancode an mit dem der Konturpunkt betreten wurde.</param>
            <param name="freemanOut">Gibt den Freemancode an mit dem der Konturpunkt verlassen wurde.</param>
        </member>
        <member name="M:SharpAccessory.Imaging.Segmentation.FreemanPoint.ToString">
            <summary>Konvertiert diese Instanz in eine lesbare Zeichenfolge.</summary>
        </member>
        <member name="P:SharpAccessory.Imaging.Segmentation.FreemanPoint.X">
            <summary>Ruft die X-Koordinate des Konturpunkts ab, oder legt diese fest.</summary>
        </member>
        <member name="P:SharpAccessory.Imaging.Segmentation.FreemanPoint.Y">
            <summary>Ruft die Y-Koordinate des Konturpunkts ab, oder legt diese fest.</summary>
        </member>
        <member name="P:SharpAccessory.Imaging.Segmentation.FreemanPoint.FreemanIn">
            <summary>Ruft den Freemancode ab mit dem der Konturpunkt betreten wurde, oder legt diesen fest.
            </summary>
        </member>
        <member name="P:SharpAccessory.Imaging.Segmentation.FreemanPoint.FreemanOut">
            <summary>Ruft den Freemancode ab mit dem der Konturpunkt verlassen wurde, oder legt diesen fest.
            </summary>
        </member>
        <member name="P:SharpAccessory.Imaging.Segmentation.FreemanPoint.IsOpeningPoint">
            <summary>Ruft einen Wert ab, der angibt, ob dieser Punkt das Objekt öffnet.</summary>
        </member>
        <member name="P:SharpAccessory.Imaging.Segmentation.FreemanPoint.IsClosingPoint">
            <summary>Ruft einen Wert ab, der angibt, ob dieser Punkt das Objekt schliesst.</summary>
        </member>
        <member name="P:SharpAccessory.Imaging.Segmentation.FreemanPoint.IsEmpty">
            <summary>Ruft einen Wert ab, der angibt, ob alle Werte 0 sind.</summary>
        </member>
        <member name="P:SharpAccessory.Imaging.Segmentation.FreemanPoint.Empty">
            <summary>Erzeugt eine neue Instanz mit allen Werten auf 0 gesetzt.</summary>
        </member>
        <member name="T:SharpAccessory.Imaging.Segmentation.ImageObject">
            <summary>Repräsentiert ein Objekt in einem Bild.</summary>
        </member>
        <member name="M:SharpAccessory.Imaging.Segmentation.ImageObject.#ctor(System.UInt32)">
            <summary>Erstellt und initialisiert eine neue Instanz.</summary>
            <param name="id">Gibt die ID des Objekts an. Gültige IDs sind alle Werte ungleich 0.</param>
        </member>
        <member name="M:SharpAccessory.Imaging.Segmentation.ImageObject.#ctor(System.UInt32,SharpAccessory.Imaging.Segmentation.Contour)">
            <summary>Erstellt und initialisiert eine neue Instanz.</summary>
            <param name="id">Gibt die ID des Objekts an. Gültige IDs sind alle Werte ungleich 0.</param>
            <param name="contour">Gibt die Kontur des Objekts an.</param>
        </member>
        <member name="M:SharpAccessory.Imaging.Segmentation.ImageObject.#ctor(System.UInt32,SharpAccessory.Imaging.Classification.Class)">
            <summary>Erstellt und initialisiert eine neue Instanz.</summary>
            <param name="id">Gibt die ID des Objekts an. Gültige IDs sind alle Werte ungleich 0.</param>
            <param name="cls">Gibt die Klasse des Objekts an.</param>
        </member>
        <member name="M:SharpAccessory.Imaging.Segmentation.ImageObject.#ctor(System.UInt32,SharpAccessory.Imaging.Segmentation.Contour,SharpAccessory.Imaging.Classification.Class)">
            <summary>Erstellt und initialisiert eine neue Instanz.</summary>
            <param name="id">Gibt die ID des Objekts an. Gültige IDs sind alle Werte ungleich 0.</param>
            <param name="contour">Gibt die Kontur des Objekts an.</param>
            <param name="cls">Gibt die Klasse des Objekts an.</param>
        </member>
        <member name="M:SharpAccessory.Imaging.Segmentation.ImageObject.EnsureAssignedToClass">
            <summary>Löst eine Ausnahme aus, wenn das Objekt keiner Klasse zugewiesen ist.</summary>
        </member>
        <member name="M:SharpAccessory.Imaging.Segmentation.ImageObject.EnsureAssignedToLayer">
            <summary>Löst eine Ausnahme aus, wenn das Objekt keiner Objektebene zugewiesen ist.</summary>
        </member>
        <member name="M:SharpAccessory.Imaging.Segmentation.ImageObject.EnsureAssignedToLayer(SharpAccessory.Imaging.Segmentation.ObjectLayer)">
            <summary>Löst eine Ausnahme aus, wenn das Objekt nicht der angegebenen Objektebene zugewiesen ist.
            </summary>
            <param name="layer">Gibt die Objektebene an mit der die Zugehörigkeit überprüft wird.</param>
        </member>
        <member name="P:SharpAccessory.Imaging.Segmentation.ImageObject.Class">
            <summary>Ruft die Klasse des Objekts ab, oder legt diese fest.</summary>
        </member>
        <member name="P:SharpAccessory.Imaging.Segmentation.ImageObject.Contour">
            <summary>Ruft die Kontur des Objekts ab.</summary>
        </member>
        <member name="P:SharpAccessory.Imaging.Segmentation.ImageObject.Features">
            <summary>Ruft die Liste der Features ab.</summary>
        </member>
        <member name="P:SharpAccessory.Imaging.Segmentation.ImageObject.Id">
            <summary>Ruft die ID des Objekts ab. Gültige IDs sind alle Werte ungleich 0.</summary>
        </member>
        <member name="P:SharpAccessory.Imaging.Segmentation.ImageObject.Layer">
            <summary>Ruft die Objektebene ab, zu der dieses Objekt gehört.</summary>
        </member>
        <member name="T:SharpAccessory.Imaging.Segmentation.ImageObjectCollection">
            <summary>Verwaltet eine Liste von Objekten.</summary>
        </member>
        <member name="M:SharpAccessory.Imaging.Segmentation.ImageObjectCollection.#ctor(SharpAccessory.Imaging.Segmentation.ImageObject[])">
            <summary>Erstellt und initialisiert eine neue Instanz.</summary>
            <param name="objects">Gibt die Objekte an die in der Liste verwaltet werden.</param>
        </member>
        <member name="M:SharpAccessory.Imaging.Segmentation.ImageObjectCollection.Contains(System.UInt32)">
            <summary>Überprüft ob das angegebene Objekt in der Auflistung enthalten ist.</summary>
            <param name="id">Gibt die ID des Objekts an.</param>
        </member>
        <member name="M:SharpAccessory.Imaging.Segmentation.ImageObjectCollection.GetObjectById(System.UInt32)">
            <summary>Ruft das Objekt mit der angegebenen ID ab.</summary>
            <param name="id">Gibt die ID des Objekts an.</param>
        </member>
        <member name="T:SharpAccessory.Imaging.Segmentation.ImageObjectEventArgs">
            <summary>Stellt Daten für ein Ereignis mit einem Bild-Objekt bereit.</summary>
        </member>
        <member name="M:SharpAccessory.Imaging.Segmentation.ImageObjectEventArgs.#ctor(SharpAccessory.Imaging.Segmentation.ImageObject)">
            <summary>Erstellt und initialisiert eine neue Instanz.</summary>
            <param name="imageObject">Gibt das betreffende Bild-Objekt an.</param>
        </member>
        <member name="P:SharpAccessory.Imaging.Segmentation.ImageObjectEventArgs.ImageObject">
            <summary>Ruft das betreffende Bild-Objekt ab.</summary>
        </member>
        <member name="T:SharpAccessory.Imaging.Segmentation.ImageObjectEventHandler">
            <summary>Methode die Ereignisse mit einem Bild-Objekt verarbeitet.</summary>
        </member>
        <member name="T:SharpAccessory.Imaging.Segmentation.InvalidContourException">
            <summary>Exception die ausgelöst wird wenn eine Kontur ungültig ist.</summary>
        </member>
        <member name="M:SharpAccessory.Imaging.Segmentation.InvalidContourException.#ctor(SharpAccessory.Imaging.Segmentation.Contour)">
            <summary>Erstellt und initialisiert eine neue Instanz.</summary>
            <param name="contour">Gibt die Contour an die ungültig ist.</param>
        </member>
        <member name="M:SharpAccessory.Imaging.Segmentation.InvalidContourException.#ctor(System.String,SharpAccessory.Imaging.Segmentation.Contour)">
            <summary>Erstellt und initialisiert eine neue Instanz.</summary>
            <param name="message">Die Meldung, in der der Fehler beschrieben wird.</param>
            <param name="contour">Gibt die Contour an die ungültig ist.</param>
        </member>
        <member name="P:SharpAccessory.Imaging.Segmentation.InvalidContourException.Contour">
            <summary>Ruft die Contour ab die ungültig ist.</summary>
        </member>
        <member name="T:SharpAccessory.Imaging.Segmentation.Map">
            <summary>Verwaltet eine 2-dimensionale Liste von Objekt-IDs.</summary>
        </member>
        <member name="M:SharpAccessory.Imaging.Segmentation.Map.#ctor(System.UInt32[0:,0:])">
            <summary>Erzeugt eine neue Map mit dem angegebenen Array.</summary>
        </member>
        <member name="M:SharpAccessory.Imaging.Segmentation.Map.#ctor(System.UInt32[0:,0:],System.Boolean)">
            <summary>Erzeugt eine neue Map mit dem angegebenen Array.</summary>
        </member>
        <member name="M:SharpAccessory.Imaging.Segmentation.Map.#ctor(SharpAccessory.Imaging.Segmentation.Map,System.Boolean)">
            <summary>Erzeugt eine neue Map und kopiert die IDs der angegebenen Map.</summary>
        </member>
        <member name="M:SharpAccessory.Imaging.Segmentation.Map.#ctor(SharpAccessory.Imaging.Segmentation.IMap,System.Boolean)">
            <summary>Erzeugt eine neue Map und kopiert die IDs der angegebenen Map.</summary>
        </member>
        <member name="M:SharpAccessory.Imaging.Segmentation.Map.#ctor(System.Int32,System.Int32)">
            <summary>Erzeugt eine neue Map mit den angegebenen Dimensionen.</summary>
        </member>
        <member name="M:SharpAccessory.Imaging.Segmentation.Map.GetId(System.Int32,System.Int32)">
            <summary>Ruft die ID an der angegebenen Position ab.</summary>
        </member>
        <member name="M:SharpAccessory.Imaging.Segmentation.Map.SetId(System.Int32,System.Int32,System.UInt32)">
            <summary>Setzt die ID an der angegebenen Position auf den angegebenen Wert.</summary>
        </member>
        <member name="M:SharpAccessory.Imaging.Segmentation.Map.Clone">
            <summary>Erzeugt eine Kopie dieser Map.</summary>
        </member>
        <member name="M:SharpAccessory.Imaging.Segmentation.Map.Seal">
            <summary>Setzt das ReadOnly-Flag auf true.</summary>
        </member>
        <member name="M:SharpAccessory.Imaging.Segmentation.Map.Dispose">
            <summary>Gibt diese Instanz frei.</summary>
        </member>
        <member name="P:SharpAccessory.Imaging.Segmentation.Map.Item(System.Int32,System.Int32)">
            <summary>Ruft die ID an der angegebenen Position ab, oder legt diese fest.</summary>
        </member>
        <member name="P:SharpAccessory.Imaging.Segmentation.Map.Width">
            <summary>Ruft die Breite der Map ab.</summary>
        </member>
        <member name="P:SharpAccessory.Imaging.Segmentation.Map.Height">
            <summary>Ruft die Höhe der Map ab.</summary>
        </member>
        <member name="P:SharpAccessory.Imaging.Segmentation.Map.ReadOnly">
            <summary>Ruft einen Wert ab, der angibt, ob diese Map schreibgeschützt ist.</summary>
        </member>
        <member name="P:SharpAccessory.Imaging.Segmentation.Map.IsDisposed">
            <summary>Ruft einen Wert ab, der angibt, ob diese Instanz bereits freigegeben wurde.</summary>
        </member>
        <member name="T:SharpAccessory.Imaging.Segmentation.ObjectDataComposite`1">
            <summary>Fasst ein Objekt und einen weiteren Parameter zusammen.</summary>
        </member>
        <member name="M:SharpAccessory.Imaging.Segmentation.ObjectDataComposite`1.#ctor">
            <summary>Erstellt und initialisiert eine neue Instanz.</summary>
        </member>
        <member name="M:SharpAccessory.Imaging.Segmentation.ObjectDataComposite`1.#ctor(SharpAccessory.Imaging.Segmentation.ImageObject)">
            <summary>Erstellt und initialisiert eine neue Instanz.</summary>
            <param name="imageObject">Gibt das Objekt an.</param>
        </member>
        <member name="M:SharpAccessory.Imaging.Segmentation.ObjectDataComposite`1.#ctor(SharpAccessory.Imaging.Segmentation.ImageObject,`0)">
            <summary>Erstellt und initialisiert eine neue Instanz.</summary>
            <param name="imageObject">Gibt das Objekt an.</param>
            <param name="data">Gibt die zur Kontur gehörenden Daten an.</param>
        </member>
        <member name="P:SharpAccessory.Imaging.Segmentation.ObjectDataComposite`1.Object">
            <summary>Ruft das Objekt ab, oder legt dieses fest.</summary>
        </member>
        <member name="P:SharpAccessory.Imaging.Segmentation.ObjectDataComposite`1.Data">
            <summary>Ruft die zum Objekt gehörenden Daten ab, oder legt diese fest.</summary>
        </member>
        <member name="T:SharpAccessory.Imaging.Segmentation.ObjectLayer">
            <summary>Repräsentiert eine Objektebene.</summary>
        </member>
        <member name="M:SharpAccessory.Imaging.Segmentation.ObjectLayer.#ctor(SharpAccessory.Imaging.Segmentation.IMap,SharpAccessory.Imaging.Segmentation.ImageObject[])">
            <summary>Erstellt und initialisiert eine neue Instanz.</summary>
            <param name="map">Gibt die Map der Objektebene an.</param>
            <param name="objects">Gibt die Liste der Objekte an.</param>
        </member>
        <member name="M:SharpAccessory.Imaging.Segmentation.ObjectLayer.#ctor(SharpAccessory.Imaging.Segmentation.IMap,SharpAccessory.Imaging.Segmentation.ImageObject[],System.String)">
            <summary>Erstellt und initialisiert eine neue Instanz.</summary>
            <param name="map">Gibt die Map der Objektebene an.</param>
            <param name="objects">Gibt die Liste der an.</param>
            <param name="name">Gibt den Namen der Objektebene an.</param>
        </member>
        <member name="M:SharpAccessory.Imaging.Segmentation.ObjectLayer.CreateAbove(System.String,System.Double,System.Double,System.Boolean)">
            <summary>Erzeugt eine neue Objektebene mit den positiv getesteten Objekten.</summary>
            <param name="feature">Gibt das Feature an mit dem der Test durchgeführt wird.</param>
            <param name="min">Gibt das inklusive zulässige Minimum für das Feature an.</param>
            <param name="max">Gibt das inklusive zulässige Maximum für das Feature an.</param>
            <param name="negate">Gibt an, ob das Test-Ergebnis negiert wird.</param>
        </member>
        <member name="M:SharpAccessory.Imaging.Segmentation.ObjectLayer.CreateAbove(System.Predicate{SharpAccessory.Imaging.Segmentation.ImageObject})">
            <summary>Erzeugt eine neue Objektebene mit den positiv getesteten Objekten.</summary>
            <param name="predicate">Methode die ein Objekt testet.</param>
        </member>
        <member name="M:SharpAccessory.Imaging.Segmentation.ObjectLayer.CreateContourImage">
            <summary>Erzeugt ein Bitmap mit den Konturen der Objekte.</summary>
        </member>
        <member name="M:SharpAccessory.Imaging.Segmentation.ObjectLayer.CreateLearningSamples">
            <summary>Erzeugt Lernstichproben aus allen Objekten die einer Klasse zugewiesen sind.</summary>
        </member>
        <member name="M:SharpAccessory.Imaging.Segmentation.ObjectLayer.CreateMapImage">
            <summary>Erzeugt ein Bitmap mit den IDs der Map.</summary>
        </member>
        <member name="M:SharpAccessory.Imaging.Segmentation.ObjectLayer.FindContainedClasses">
            <summary>Ruft die Liste aller enthaltenen Klassen ab.</summary>
        </member>
        <member name="M:SharpAccessory.Imaging.Segmentation.ObjectLayer.FindContainedFeatures">
            <summary>Ruft die Namen aller enthaltenen Features ab.</summary>
        </member>
        <member name="M:SharpAccessory.Imaging.Segmentation.ObjectLayer.RemoveFeature(System.String)">
            <summary>Entfernt das angegebene Feature von allen Objekten.</summary>
        </member>
        <member name="M:SharpAccessory.Imaging.Segmentation.ObjectLayer.ResetClassification">
            <summary>Setzt die zugewiesene Klasse in allen Objekten auf null.</summary>
        </member>
        <member name="M:SharpAccessory.Imaging.Segmentation.ObjectLayer.ToString">
            <summary>Ruft den Namen der Objektebene ab.</summary>
        </member>
        <member name="P:SharpAccessory.Imaging.Segmentation.ObjectLayer.Name">
            <summary>Ruft den Namen der Objektebene ab, oder legt diesen fest.</summary>
        </member>
        <member name="P:SharpAccessory.Imaging.Segmentation.ObjectLayer.Map">
            <summary>Ruft die Map der Objektebene ab.</summary>
        </member>
        <member name="P:SharpAccessory.Imaging.Segmentation.ObjectLayer.Objects">
            <summary>Ruft die Liste der Objekte ab.</summary>
        </member>
        <member name="T:SharpAccessory.Imaging.Segmentation.ObjectLayerCollection">
            <summary>Verwaltet eine Liste von Objektebenen.</summary>
        </member>
        <member name="M:SharpAccessory.Imaging.Segmentation.ObjectLayerCollection.#ctor(SharpAccessory.Imaging.Segmentation.ObjectLayer[])">
            <summary>Erstellt und initialisiert eine neue Instanz.</summary>
            <param name="layers">Gibt die Objektebenen an die in der Liste verwaltet werden.</param>
        </member>
        <member name="T:SharpAccessory.Imaging.Segmentation.ObjectLayerEventArgs">
            <summary>Stellt Daten für ein Ereignis mit einer Objektebene bereit.</summary>
        </member>
        <member name="M:SharpAccessory.Imaging.Segmentation.ObjectLayerEventArgs.#ctor(SharpAccessory.Imaging.Segmentation.ObjectLayer)">
            <summary>Erstellt und initialisiert eine neue Instanz.</summary>
            <param name="layer">Gibt die betreffende Objektebene an.</param>
        </member>
        <member name="P:SharpAccessory.Imaging.Segmentation.ObjectLayerEventArgs.Layer">
            <summary>Ruft die betreffende Objektebene ab.</summary>
        </member>
        <member name="T:SharpAccessory.Imaging.Segmentation.ObjectLayerEventHandler">
            <summary>Methode die Ereignisse mit einer Objektebene verarbeitet.</summary>
        </member>
        <member name="T:SharpAccessory.Imaging.Segmentation.ObjectNotFoundException">
            <summary>Exception die ausgelöst wird wenn ein Objekt nicht gefunden werden konnte.</summary>
        </member>
        <member name="M:SharpAccessory.Imaging.Segmentation.ObjectNotFoundException.#ctor(System.UInt32)">
            <summary>Erstellt und initialisiert eine neue Instanz.</summary>
            <param name="id">Gibt die ID des Objekts an das nicht gefunden werden konnte.</param>
        </member>
        <member name="M:SharpAccessory.Imaging.Segmentation.ObjectNotFoundException.#ctor(System.String,System.UInt32)">
            <summary>Erstellt und initialisiert eine neue Instanz.</summary>
            <param name="message">Die Meldung, in der der Fehler beschrieben wird.</param>
            <param name="id">Gibt die ID des Objekts an das nicht gefunden werden konnte.</param>
        </member>
        <member name="P:SharpAccessory.Imaging.Segmentation.ObjectNotFoundException.Id">
            <summary>Ruft die ID des Objekts ab das nicht gefunden werden konnte.</summary>
        </member>
        <member name="T:SharpAccessory.Imaging.Segmentation.ObjectRenderer">
            <summary>Rendert Objekte und Objektebenen.</summary>
        </member>
        <member name="M:SharpAccessory.Imaging.Segmentation.ObjectRenderer.#ctor">
            <summary>Erstellt und initialisiert eine neue Instanz.</summary>
        </member>
        <member name="M:SharpAccessory.Imaging.Segmentation.ObjectRenderer.RenderLayer(SharpAccessory.Imaging.Segmentation.ObjectLayer,System.Drawing.Graphics)">
            <summary>Rendert die angegebene Objektebene.</summary>
        </member>
        <member name="M:SharpAccessory.Imaging.Segmentation.ObjectRenderer.RenderObject(SharpAccessory.Imaging.Segmentation.ImageObject,System.Drawing.Graphics)">
            <summary>Rendert das angegebene Objekt.</summary>
        </member>
        <member name="M:SharpAccessory.Imaging.Segmentation.ObjectRenderer.RenderObject(SharpAccessory.Imaging.Segmentation.ImageObject,System.Drawing.Graphics,System.Drawing.Color)">
            <summary>Rendert das angegebene Objekt.</summary>
        </member>
        <member name="P:SharpAccessory.Imaging.Segmentation.ObjectRenderer.ContourWidth">
            <summary>Ruft die Breite ab, mit der Konturen gerendert werden, oder legt diese fest.</summary>
        </member>
        <member name="P:SharpAccessory.Imaging.Segmentation.ObjectRenderer.RenderFilled">
            <summary>Ruft einen Wert ab, der angibt, ob Objekte ausgefüllt gerendert werden, oder legt diesen 
            fest.</summary>
        </member>
        <member name="P:SharpAccessory.Imaging.Segmentation.ObjectRenderer.DefaultColor">
            <summary>Ruft die Farbe ab, mit der Objekte gerendert werden, die keiner Klasse zugewiesen sind, 
            oder legt diese fest.</summary>
        </member>
        <member name="T:SharpAccessory.Imaging.Segmentation.ThresholdSegmentation">
            <summary>Segmentiert Graustufenbilder mit einem Schwellwert.</summary>
        </member>
        <member name="M:SharpAccessory.Imaging.Segmentation.ThresholdSegmentation.Execute(SharpAccessory.Imaging.Processors.GrayscaleProcessor)">
            <summary>Führt die Segmentierung mit dem angegebenen Graustufenbild aus.</summary>
            <param name="processor">Bietet Zugriff auf die Bilddaten.</param>
        </member>
        <member name="M:SharpAccessory.Imaging.Segmentation.ThresholdSegmentation.Execute(SharpAccessory.Imaging.Processors.GrayscaleProcessor,System.Int32)">
            <summary>Führt die Segmentierung mit dem angegebenen Graustufenbild aus.</summary>
            <param name="processor">Bietet Zugriff auf die Bilddaten.</param>
            <param name="threshold">Gibt den zu verwendenden Schwellwert an.</param>
        </member>
        <member name="T:SharpAccessory.Imaging.Segmentation.WatershedSegmentation">
            <summary>Segmentiert Graustufenbilder mit der Wasserscheiden-Transformation. Original Paper: Vincent 
            L, Soille P. Watersheds in Digital Spaces: An Efficient Algorithm Based on Immersion Simulations. 
            IEEE Transactions on Pattern Analysis and Machine Intelligence. 1991:13(6), 583-598.</summary>
        </member>
        <member name="M:SharpAccessory.Imaging.Segmentation.WatershedSegmentation.Execute(SharpAccessory.Imaging.Processors.GrayscaleProcessor)">
            <summary>Führt die Segmentierung aus.</summary>
            <param name="processor">Bietet Zugriff auf die Bilddaten.</param>
        </member>
    </members>
</doc>
