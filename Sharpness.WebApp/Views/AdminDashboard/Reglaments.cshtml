@model Sharpness.WebApp.Models.SharpnessViewModels

@{
    ViewBag.Title = "Reglaments";
    Layout = "~/Views/Shared/_LayoutDashboard.cshtml";
}

<div class="col-lg-4">
    <div class="card">
        <div class="card-header">
            <strong class="card-title">Add a new reglament</strong>
        </div>
        <div class="card-body">
            <!-- Credit Card -->
            <div id="pay-invoice">
                <div class="card-body">
                    <div class="card-title">

                    </div>
                    
                    @using (Html.BeginForm("AddReglament", "AdminDashboard", FormMethod.Post))
                    {
                        @Html.AntiForgeryToken()

                        
                            @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                            <div class="form-group">
                                
                                    @Html.EditorFor(model => model.Reglament.Titel, new { htmlAttributes = new { @class = "form-control", @placeholder = "Titel", @type = "text" } })
                                    @Html.ValidationMessageFor(model => model.Reglament.Titel, "", new { @class = "text-danger" })
                                
                            </div>

                            <div class="form-group">
                                
                                    @Html.EditorFor(model => model.Reglament.SharpnessThresholdValue, new { htmlAttributes = new { @class = "form-control", @placeholder = "Sharpness Value", @type = "text" } })
                                    @Html.ValidationMessageFor(model => model.Reglament.SharpnessThresholdValue, "", new { @class = "text-danger" })
                                
                            </div>

                            <div class="form-group">
                                
                                    @Html.EditorFor(model => model.Reglament.Scaling, new { htmlAttributes = new { @class = "form-control", @placeholder = "Scaling", @type = "text" } })
                                    @Html.ValidationMessageFor(model => model.Reglament.Scaling, "", new { @class = "text-danger" })
                                
                            </div>

                            <div class="form-group">
                                
                                    @Html.EditorFor(model => model.Reglament.Edges, new { htmlAttributes = new { @class = "form-control", @placeholder = "Edges", @type = "text" } })
                                    @Html.ValidationMessageFor(model => model.Reglament.Edges, "", new { @class = "text-danger" })
                                
                            </div>

                            <div class="form-group">
                                
                                    @Html.EditorFor(model => model.Reglament.TileSize, new { htmlAttributes = new { @class = "form-control", @placeholder = "Tile Size", @type = "text" } })
                                    @Html.ValidationMessageFor(model => model.Reglament.TileSize, "", new { @class = "text-danger" })
                                
                            </div>


                            <div class="form-group">
                                
                                    @Html.EditorFor(model => model.Reglament.AcceptanceValue, new { htmlAttributes = new { @class = "form-control", @placeholder = "Acceptance Value", @type = "text" } })
                                    @Html.ValidationMessageFor(model => model.Reglament.AcceptanceValue, "", new { @class = "text-danger" })
                                
                            </div>


                            <div class="form-group">
                                        @Html.EditorFor(model => model.Reglament.Status)
                                        @Html.ValidationMessageFor(model => model.Reglament.Status, "", new { @class = "text-danger" })
                                    
                            </div>

                           

                            <div class="form-group">
                                <div class="col-md-offset-2 col-md-10">
                                    <input type="submit" value="Add" class="btn btn-success" />
                                </div>
                            </div>
                    
                    }
                </div>
            </div>
        </div>
    </div> <!-- .card -->
</div><!--/.col-->



@{
    foreach (var item in Model.Reglaments)
    {
        <div class="col-md-4">
            <aside class="profile-nav alt">
                <section class="card">
                    <div class="card-header user-header alt bg-dark">
                        <div class="media">

                            <div class="media-body">
                                <h2 class="text-light display-6">@item.Titel</h2>

                            </div>
                        </div>
                    </div>

                    <ul class="list-group list-group-flush">
                        <li class="list-group-item">
                            Edges: @item.Edges
                        </li>
                        <li class="list-group-item">
                            Sharpness value: @item.SharpnessThresholdValue
                        </li>
                        <li class="list-group-item">
                            Tile Size: @item.TileSize
                        </li>
                        <li class="list-group-item">
                            Scaling: @item.Scaling
                        </li>
                        <li class="list-group-item">
                            Acceptance value: @item.AcceptanceValue %
                        </li>
                        <li class="list-group-item">
                            @if (item.Status == true)
                            {
                                <label class="switch switch-text switch-primary switch-pill"><input type="checkbox" class="switch-input" checked="true"> <span data-on="On" data-off="Off" class="switch-label"></span> <span class="switch-handle"></span></label>

                            }
                            else
                            {
                                <label class="switch switch-text switch-primary switch-pill"><input type="checkbox" class="switch-input" checked="false"> <span data-on="On" data-off="Off" class="switch-label"></span> <span class="switch-handle"></span></label>

                            }
                        </li>

                    </ul>
                    
                    <button type="button" class="btn btn-danger" onclick="location.href='@Url.Action("DeleteReglament")?ReglamentId=@item.ReglamentId)'">Delete</button>
                    

                </section>
            </aside>
            
        </div>


    }
}
